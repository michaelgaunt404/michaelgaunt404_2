<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Gauntlet: An R Blog</title>
        <link>https://mikegaunt404.netlify.app/</link>
        <description>Recent content on The Gauntlet: An R Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 28 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mikegaunt404.netlify.app/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>5 Minute Tutorials: Using Protocol Buffers in R</title>
        <link>https://mikegaunt404.netlify.app/2025/01/28/quickie-protobuf/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://mikegaunt404.netlify.app/2025/01/28/quickie-protobuf/</guid>
        <description>


&lt;div id=&#34;quick-overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Quick Overview&lt;/h1&gt;
&lt;p&gt;Hi hi!&lt;br /&gt;
This is a quick tutorial on using &lt;strong&gt;Protocol Buffers&lt;/strong&gt; (protobufs) in R, particularly for working with &lt;strong&gt;GTFS-realtime&lt;/strong&gt; data. If you’ve ever struggled to parse protobuf data, this guide will walk through the key steps to get you started.&lt;/p&gt;
&lt;div id=&#34;what-are-protocol-buffers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What are Protocol Buffers?&lt;/h2&gt;
&lt;p&gt;Protocol Buffers (protobufs) are a language-neutral, platform-neutral extensible mechanism for serializing structured data. They are commonly used in real-time data applications, such as &lt;strong&gt;GTFS-realtime&lt;/strong&gt;, because they are lightweight and efficient. Unlike JSON or XML, which store data in human-readable formats, protobufs store data in binary format, making them compact and fast to transmit.&lt;/p&gt;
&lt;p&gt;In R, we use the &lt;strong&gt;RProtoBuf&lt;/strong&gt; package to read and process protobufs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;div id=&#34;checking-available-protobuf-descriptors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Checking Available Protobuf Descriptors&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;descriptor pool&lt;/strong&gt; is a collection of message types and enums available in a protobuf schema. In R, we can inspect available descriptors with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ls(&amp;quot;RProtoBuf:DescriptorPool&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;rexp.CMPLX&amp;quot;                   &amp;quot;rexp.REXP&amp;quot;                   
## [3] &amp;quot;rexp.STRING&amp;quot;                  &amp;quot;rprotobuf.HelloWorldRequest&amp;quot; 
## [5] &amp;quot;rprotobuf.HelloWorldResponse&amp;quot; &amp;quot;tutorial.AddressBook&amp;quot;        
## [7] &amp;quot;tutorial.Person&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Descriptors define the structure of the data. Think of them like a schema for a database or the column definitions in a data frame.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;downloading-and-reading-the-gtfs-realtime-protobuf&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Downloading and Reading the GTFS-realtime Protobuf&lt;/h3&gt;
&lt;p&gt;GTFS-realtime data uses a predefined protobuf schema. First, download the &lt;code&gt;.proto&lt;/code&gt; definition file, and then load the protobuf schema into R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;proto_file = &amp;quot;https://gtfs.org/documentation/realtime/gtfs-realtime.proto&amp;quot;
download.file(proto_file, destfile = &amp;quot;gtfs-realtime.proto&amp;quot;)
readProtoFiles(&amp;quot;gtfs-realtime.proto&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ls(&amp;quot;RProtoBuf:DescriptorPool&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;rexp.CMPLX&amp;quot;                         &amp;quot;rexp.REXP&amp;quot;                         
##  [3] &amp;quot;rexp.STRING&amp;quot;                        &amp;quot;rprotobuf.HelloWorldRequest&amp;quot;       
##  [5] &amp;quot;rprotobuf.HelloWorldResponse&amp;quot;       &amp;quot;transit_realtime.Alert&amp;quot;            
##  [7] &amp;quot;transit_realtime.EntitySelector&amp;quot;    &amp;quot;transit_realtime.FeedEntity&amp;quot;       
##  [9] &amp;quot;transit_realtime.FeedHeader&amp;quot;        &amp;quot;transit_realtime.FeedMessage&amp;quot;      
## [11] &amp;quot;transit_realtime.Position&amp;quot;          &amp;quot;transit_realtime.ReplacementStop&amp;quot;  
## [13] &amp;quot;transit_realtime.Shape&amp;quot;             &amp;quot;transit_realtime.Stop&amp;quot;             
## [15] &amp;quot;transit_realtime.StopSelector&amp;quot;      &amp;quot;transit_realtime.TimeRange&amp;quot;        
## [17] &amp;quot;transit_realtime.TranslatedImage&amp;quot;   &amp;quot;transit_realtime.TranslatedString&amp;quot; 
## [19] &amp;quot;transit_realtime.TripDescriptor&amp;quot;    &amp;quot;transit_realtime.TripModifications&amp;quot;
## [21] &amp;quot;transit_realtime.TripUpdate&amp;quot;        &amp;quot;transit_realtime.VehicleDescriptor&amp;quot;
## [23] &amp;quot;transit_realtime.VehiclePosition&amp;quot;   &amp;quot;tutorial.AddressBook&amp;quot;              
## [25] &amp;quot;tutorial.Person&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This lets us see the available message types defined in the GTFS-realtime schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;understanding-a-protobuf-descriptor&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Understanding a Protobuf Descriptor&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;descriptor&lt;/strong&gt; is like a class definition for a protobuf message. Here’s how we inspect one:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;descriptor = RProtoBuf::P(&amp;quot;transit_realtime.FeedMessage&amp;quot;)
descriptor&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## descriptor for type &amp;#39;transit_realtime.FeedMessage&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Descriptors define the message structure, including nested message types. In R, they may look similar to functions or methods, but they represent structured data rather than executable code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-a-gtfs-realtime-feed&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Loading a GTFS-realtime Feed&lt;/h1&gt;
&lt;p&gt;GTFS-realtime feeds are updated frequently and are stored in &lt;strong&gt;binary format&lt;/strong&gt; for efficiency. We need to download and parse them properly.&lt;/p&gt;
&lt;p&gt;First, retrieve the binary protobuf feed:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;feed_url &amp;lt;- &amp;quot;http://s3.amazonaws.com/commtrans-realtime-prod/tripupdates.pb&amp;quot;
resp = httr::GET(feed_url)
feed_data = resp %&amp;gt;% content(&amp;quot;raw&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, parse the binary data using the descriptor:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gtfs_feed = P(&amp;quot;transit_realtime.FeedMessage&amp;quot;)$read(feed_data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;$read()&lt;/code&gt; function is similar to a method in Python—it’s how we deserialize binary data into a structured format.&lt;/p&gt;
&lt;div id=&#34;converting-the-feed-to-json&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Converting the Feed to JSON&lt;/h3&gt;
&lt;p&gt;To work with the data more easily, convert it to JSON:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gtfs_feed_json = gtfs_feed$toJSON()
gtfs_feed_json = jsonlite::fromJSON(gtfs_feed_json, simplifyVector = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s extract and inspect the entities in the feed:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gtfs_feed_json %&amp;gt;% 
  .[[&amp;#39;entity&amp;#39;]] %&amp;gt;% 
  enframe() %&amp;gt;% 
  unnest_wider(value) %&amp;gt;% 
  unnest_wider(tripUpdate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 185 × 6
##     name id                   trip         stopTimeUpdate vehicle      timestamp
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;         &amp;lt;list&amp;gt;       &amp;lt;chr&amp;gt;    
##  1     1 1738176218_12867957… &amp;lt;named list&amp;gt; &amp;lt;list [11]&amp;gt;    &amp;lt;named list&amp;gt; 17381761…
##  2     2 1738176218_12867959… &amp;lt;named list&amp;gt; &amp;lt;list [32]&amp;gt;    &amp;lt;NULL&amp;gt;       &amp;lt;NA&amp;gt;     
##  3     3 1738176218_12867985… &amp;lt;named list&amp;gt; &amp;lt;list [34]&amp;gt;    &amp;lt;NULL&amp;gt;       &amp;lt;NA&amp;gt;     
##  4     4 1738176218_12868024… &amp;lt;named list&amp;gt; &amp;lt;list [32]&amp;gt;    &amp;lt;named list&amp;gt; 17381761…
##  5     5 1738176218_12868028… &amp;lt;named list&amp;gt; &amp;lt;list [27]&amp;gt;    &amp;lt;named list&amp;gt; 17381761…
##  6     6 1738176218_12868029… &amp;lt;named list&amp;gt; &amp;lt;list [34]&amp;gt;    &amp;lt;NULL&amp;gt;       &amp;lt;NA&amp;gt;     
##  7     7 1738176218_12867622… &amp;lt;named list&amp;gt; &amp;lt;list [26]&amp;gt;    &amp;lt;NULL&amp;gt;       &amp;lt;NA&amp;gt;     
##  8     8 1738176218_12867623… &amp;lt;named list&amp;gt; &amp;lt;list [2]&amp;gt;     &amp;lt;NULL&amp;gt;       &amp;lt;NA&amp;gt;     
##  9     9 1738176218_12867624… &amp;lt;named list&amp;gt; &amp;lt;list [26]&amp;gt;    &amp;lt;named list&amp;gt; 17381761…
## 10    10 1738176218_12867664… &amp;lt;named list&amp;gt; &amp;lt;list [27]&amp;gt;    &amp;lt;named list&amp;gt; 17381761…
## # ℹ 175 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final Thoughts&lt;/h1&gt;
&lt;p&gt;This tutorial showed how to:
- Load and inspect GTFS-realtime protobuf schemas
- Download and parse GTFS-realtime data
- Convert protobufs to JSON for easier manipulation&lt;/p&gt;
&lt;p&gt;Protobufs are an efficient way to handle structured real-time data, and &lt;strong&gt;RProtoBuf&lt;/strong&gt; makes it possible to work with them in R.&lt;/p&gt;
&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Organized Code</title>
        <link>https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/</link>
        <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/</guid>
        <description>
&lt;script src=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/core-js/shim.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/react/react.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/react/react-dom.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/reactwidget/react-tools.umd.cjs&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/htmltools-fill/fill.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/reactable/reactable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2024/10/02/clean-structured-code/index_files/reactable-binding/reactable.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This vignette explains why using a consistent script structure and metadata format is essential for collaboration, efficiency, and reproducibility in R projects. By following a standardized template, you ensure that anyone using your scripts can quickly understand what the script does, who created it, and any specific requirements needed to run it.&lt;/p&gt;
&lt;p&gt;By the end of this vignette, you’ll be familiar with a script template that helps organize code effectively and facilitates rapid development.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;why-use-a-standard-template&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why Use a Standard Template?&lt;/h3&gt;
&lt;p&gt;Having a standard template ensures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Scripts follow the same structure, making it easier for anyone to understand and maintain them.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;: Repeated sections like library loading or path setup can be quickly modified for different environments or projects.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Reduction&lt;/strong&gt;: Code dependencies (such as library loading or data sourcing) are defined in one place, reducing errors due to missing libraries or data.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;: Team members can easily navigate scripts without needing deep explanations.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;the-script-template&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Script Template&lt;/h3&gt;
&lt;p&gt;Here is the recommended template for your R scripts.&lt;/p&gt;
&lt;p&gt;There is a small section at the top that can be populated with specific metadata - script description, author, and additional notes (ReadMe). This information is crucial for anyone coming back to the script later, especially when script names might not be descriptive enough.&lt;/p&gt;
&lt;p&gt;This section is then followed by clearly defined sections for loading libraries, paths, data, and helper functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# DESC: This script [[insert brief readme here]]
#
# By: mike gaunt, mike.gaunt.123@email.com
#
# README: [[insert brief readme here]]
#-------- [[insert brief readme here]]
#
# *please use 80 character margins
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#library set-up=================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#content in this section should be removed if in production - ok for dev
library(tidyverse)
library(gauntlet)

#path set-up====================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#content in this section should be removed if in production - ok for dev

#source helpers/utilities=======================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#content in this section should be removed if in production - ok for dev

#source data====================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#content in this section should be removed if in production - ok for dev
#area to upload data with and to perform initial munging
#please add test data here so that others may use/unit test these scripts


#main header====================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##sub header 1==================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##sub header 2==================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#script end=====================================================================&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;walkthrough-of-the-template&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Walkthrough of the Template&lt;/h3&gt;
&lt;div id=&#34;metadata-section&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1. &lt;strong&gt;Metadata Section&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;At the top of every script, include a commented-out section with three elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DESC&lt;/strong&gt;: Briefly explain what the script does.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By&lt;/strong&gt;: The name of the person who created the script.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;README&lt;/strong&gt;: Any additional information for future users, such as requirements, assumptions, or related files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s what the metadata block should look like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# DESC: Script pre-processes Austin housing data for spatial modeling
#
# By: mike gaunt, mike.gaunt.123@email.com
#
# README: makes a number of features based on initial feature space
#-------- converts to spatial object for mapping and GIS purposes
#
# *please use 80 character margins
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;library-setup&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;2. &lt;strong&gt;Library Setup&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;After the metadata section, the first executable code should load all the required libraries.&lt;/p&gt;
&lt;p&gt;Having libraries declared in one place ensures that all dependencies are loaded at the beginning, preventing errors due to missing packages later in the script.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library set-up=================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(tidyverse)
library(glue)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;path-setup&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3. &lt;strong&gt;Path Setup&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Next, define the paths for any input data or outputs. Keeping paths together makes it easier to adapt the script to different file structures without searching through the entire code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#path set-up====================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
input_path = &amp;quot;path/to/data&amp;quot;
url_data_1 = &amp;#39;www.somedata1.com&amp;#39;
output_path = &amp;quot;path/to/output&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sourcedefine-functions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;4. &lt;strong&gt;Source/Define Functions&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Define all custom functions and source all scripts that are required to run the code. This clearly communicates to that downstream users what additional materials they will need to run the script.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#source helpers/utilities=======================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source(&amp;quot;./R/script_containing_functions.R&amp;quot;)

custom_function = function(input){
  # ...code...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;5. &lt;strong&gt;Loading Data&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;It’s also important to load your data early on in the script, ensuring that it’s done in a way that clearly defines the location of your data file. This way, others can easily understand where the data comes from and how to adjust it if needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#source data====================================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data = read.csv(here(input_path, &amp;quot;file.csv&amp;quot;))
internet_data = httr::GET(url_data_1)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;case-study&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Case Study&lt;/h4&gt;
&lt;p&gt;In this section, we’ll explore the benefits of using a structured template by creating and analyzing a temporary directory of example R scripts.&lt;/p&gt;
&lt;p&gt;The code below sets up a temporary directory and generates several example R scripts:&lt;/p&gt;
&lt;p&gt;After creating the scripts, we can check what’s inside the directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;dev_example_2.R&amp;quot;    &amp;quot;dev_example_3.R&amp;quot;    &amp;quot;process_mtcars.R&amp;quot;  
## [4] &amp;quot;script_example_1.R&amp;quot; &amp;quot;script_example_4.R&amp;quot; &amp;quot;temp_function_1.R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the file names are not very descriptive. Imagine receiving a large codebase with numerous files like this. It would be challenging to understand who wrote the scripts, what they do, or how they are connected.&lt;/p&gt;
&lt;p&gt;Now, let’s examine one of the scripts in detail:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## #
## # DESC: A script for visualizing results
## #
## # By: Bob Lee, bobby.lee@aol.com
## #
## # README: Generates plots for report
## #-------- Auto saves to shared drive location
## #
## # *please use 80 character margins
## #
## #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
## .....code.....&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the metadata, we can immediately understand the purpose of this script and who created it. The README section also provides valuable context, such as how the plots are automatically saved rather than being stored in a variable, preventing confusion for future users.&lt;/p&gt;
&lt;p&gt;Next, let’s analyze all the files in the directory at once:&lt;/p&gt;
&lt;div class=&#34;reactable html-widget html-fill-item&#34; id=&#34;htmlwidget-1&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;script&#34;:[&#34;dev_example_2.R&#34;,&#34;dev_example_3.R&#34;,&#34;process_mtcars.R&#34;,&#34;script_example_1.R&#34;,&#34;script_example_4.R&#34;,&#34;temp_function_1.R&#34;],&#34;type&#34;:[&#34;dev&#34;,&#34;dev&#34;,&#34;NULL&#34;,&#34;script&#34;,&#34;script&#34;,&#34;NULL&#34;],&#34;author&#34;:[&#34;Jane Smith, j.smith@yerhoo.com&#34;,&#34;Alice Johnson, a97@moomle.com&#34;,&#34;NULL&#34;,&#34;Bob Lee, bobby.lee@aol.com&#34;,&#34;John Doe, jd@Rmail.com&#34;,&#34;NULL&#34;],&#34;description&#34;:[&#34;A script for data cleaning&#34;,&#34;A helper function script&#34;,&#34;NULL&#34;,&#34;A script for visualizing results&#34;,&#34;A script to demonstrate metadata&#34;,&#34;NULL&#34;],&#34;details&#34;:[&#34;This script focuses on cleaning survey data                                                                             Perfroms hashing of PII features                                                                                        &#34;,&#34;Contains helper functions for analysis                                                                                  Sourced manually by other scripts                                                                                       &#34;,&#34;NULL&#34;,&#34;Generates plots for report                                                                                              Auto saves to shared drive location                                                                                     &#34;,&#34;Additional context for future users                                                                                     Some other text                                                                                                         &#34;,&#34;NULL&#34;]},&#34;columns&#34;:[{&#34;id&#34;:&#34;script&#34;,&#34;name&#34;:&#34;script&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;id&#34;:&#34;type&#34;,&#34;name&#34;:&#34;type&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;id&#34;:&#34;author&#34;,&#34;name&#34;:&#34;author&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;id&#34;:&#34;description&#34;,&#34;name&#34;:&#34;description&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;id&#34;:&#34;details&#34;,&#34;name&#34;:&#34;details&#34;,&#34;type&#34;:&#34;character&#34;}],&#34;dataKey&#34;:&#34;f747b908cb52b6911a6de44ed91b4104&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Key takeaways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can now view all the scripts and their associated metadata.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Scripts following the recommended template have clear metadata, while those without the template remain ambiguous, with missing author and description details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;:
I want to quickly highlight the benefits of using prefixes like &lt;code&gt;script_&lt;/code&gt; or &lt;code&gt;dev_&lt;/code&gt; in file names. These prefixes provide clarity regarding what the code does or at what stage of development it is.&lt;/p&gt;
&lt;p&gt;The way I use these prefixes is as follows: every code file starts off as a &lt;strong&gt;dev&lt;/strong&gt; script. If I’m initially building something out, I save it with the &lt;code&gt;dev_&lt;/code&gt; prefix.&lt;/p&gt;
&lt;p&gt;Once a script reaches a stage where it’s fairly formalized and unlikely to change, I save it with the &lt;code&gt;script_&lt;/code&gt; prefix - denoting that it is now “stable”.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>5 Minute Tutorials: Fast Data Loading</title>
        <link>https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/</link>
        <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/</guid>
        <description>
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/index_files/core-js/shim.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/index_files/react/react.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/index_files/react/react-dom.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/index_files/reactwidget/react-tools.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/index_files/reactable-binding/reactable.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;quick-overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Quick Overview&lt;/h1&gt;
&lt;p&gt;Hi hi!&lt;br /&gt;
This is intended to be a very quick tutorial highlighting bite-sizeable and really helpful R tips.&lt;/p&gt;
&lt;div id=&#34;what-are-we-looking-at-today&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What are we looking at today&lt;/h2&gt;
&lt;p&gt;I wanted to share some really fast, efficient, and extremely useful data storage methods that extend far beyond the capabilities of &lt;code&gt;write.csv()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;qs objects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rds objects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data.table CSVs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base R CSVs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/traversc/qs?tab=readme-ov-file#features&#34;&gt;Link to qs github page&lt;/a&gt; - the features table provides a really great way to compare the main methods we will be looking at.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;We are going to make basic script that creates a pretty large data set and we will use different methods to save and reload it and compare the time it takes to perform this action and the resulting file size of the file that is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-you-need&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What you need&lt;/h2&gt;
&lt;p&gt;Libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(qs)
library(data.table)
library(readr)
library(tictoc)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Custom functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tictoc_seconds = function(toc_object){
  seconds = toc_object[2]-toc_object[1]
  return(seconds)
}

save_and_read_data &amp;lt;- function(extension
                               ,data
                               ,dir) {
  tictoc::tic()
  
  file &amp;lt;- here::here(dir, paste0(&amp;quot;myfile.&amp;quot;, extension))
  
  if (extension == &amp;quot;qs&amp;quot;) {
    qsave(data, file)
    df2 &amp;lt;- qread(file)
  } else if (extension == &amp;quot;rds&amp;quot;) {
    readr::write_rds(data, file)
    df2 &amp;lt;- readr::read_rds(file)
  } else if (extension == &amp;quot;rds&amp;quot;) {
    write_rds(data, file)
    df2 &amp;lt;- read_rds(file)
  } else if (extension == &amp;quot;dt&amp;quot;) {
    data.table::fwrite(data, file)
    df2 &amp;lt;- data.table::fread(file)
  } else if (extension == &amp;quot;arrow&amp;quot;) {
    arrow::write_feather(data, file)
    df2 &amp;lt;- arrow::read_feather(file)
  } else if (extension == &amp;quot;parquet&amp;quot;) {
    arrow::write_parquet(data, file)
    df2 &amp;lt;- arrow::read_parquet(file)
  } else if (extension == &amp;quot;csv&amp;quot;) {
    write.csv2(data, file)
    df2 &amp;lt;- read.csv2(file)
  } else {
    stop(&amp;quot;Unsupported file extension. Please use &amp;#39;qs&amp;#39; or &amp;#39;rds&amp;#39;.&amp;quot;)
  }
  
  time_elapsed = tictoc::toc(quiet = T)
  time_elapsed_seconds &amp;lt;- tictoc_seconds(as.numeric(time_elapsed))
  file_size &amp;lt;- file.size(file)
  
  return(
    data.frame(
      extension = extension
      ,time_elapsed = round(time_elapsed_seconds, 2)
      ,size = file_size)
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;base-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Base Data&lt;/h2&gt;
&lt;p&gt;The code below makes the datafame that we will use for this tutorial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(123)

length_of_dataframe &amp;lt;- 5e6

data &amp;lt;- data.frame(
  x = seq(1, length_of_dataframe)
  ,y = 2 * seq(1, length_of_dataframe) + rnorm(length_of_dataframe, mean = 0, sd = length_of_dataframe*.2)
  ,z = sample(letters, length_of_dataframe, replace = T)
) %&amp;gt;% 
  mutate(model = rep(c(&amp;quot;model_1&amp;quot;, &amp;quot;model_2&amp;quot;, &amp;quot;model_3&amp;quot;, &amp;quot;model_4&amp;quot;), length_of_dataframe/4))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-data-storage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Data Storage&lt;/h2&gt;
&lt;p&gt;Here we use each method to store the basic dataframe that we made above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tempdir = tempdir()

df_bench = c(&amp;quot;qs&amp;quot;, &amp;quot;rds&amp;quot;, &amp;quot;dt&amp;quot;, &amp;quot;arrow&amp;quot;, &amp;quot;parquet&amp;quot;, &amp;quot;csv&amp;quot;) %&amp;gt;% 
  map_df(~save_and_read_data(
    extension = .x
    ,data = data
    ,dir = tempdir)) %&amp;gt;% 
  mutate(
    time_adj = round(time_elapsed/time_elapsed[1], 1)
    ,size_adj = round(size/size[1], 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the comparison of how fast each method performed the action and the size of the resulting saved data file.&lt;/p&gt;
&lt;p&gt;We benchmark all methods and metrics to &lt;code&gt;qs&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;extension&#34;:[&#34;qs&#34;,&#34;rds&#34;,&#34;dt&#34;,&#34;arrow&#34;,&#34;parquet&#34;,&#34;csv&#34;],&#34;time_elapsed&#34;:[2.22,4.77,1,1.1,1.79,71.89],&#34;size&#34;:[38463456,180000215,178533835,105197946,64073111,247422781],&#34;time_adj&#34;:[1,2.1,0.5,0.5,0.8,32.4],&#34;size_adj&#34;:[1,4.7,4.6,2.7,1.7,6.4]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;extension&#34;,&#34;name&#34;:&#34;extension&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;time_elapsed&#34;,&#34;name&#34;:&#34;time_elapsed&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size&#34;,&#34;name&#34;:&#34;size&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;time_adj&#34;,&#34;name&#34;:&#34;time_adj&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size_adj&#34;,&#34;name&#34;:&#34;size_adj&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;e4895ffa04929875c7d8ffdfcb7c0903&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Few points of interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;write.csv&lt;/code&gt; is clearly antiquated, save yourself file storage and time and stop using it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data.tables&lt;/code&gt; is about as fast as &lt;code&gt;arrow&lt;/code&gt; but the resulting file is rather large - +4x larger!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;storing-nested-objects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Storing Nested Objects&lt;/h2&gt;
&lt;p&gt;In this section, we use each method to store more complex nested objects.&lt;/p&gt;
&lt;p&gt;I’m not going to explain what they are here in detail but TLDR; you can jam what you normally be separate R objects into a singular object and then save them.&lt;/p&gt;
&lt;p&gt;They are very useful when making derivative items from a &lt;code&gt;main&lt;/code&gt; object and then keeping them all together as a unit.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#this object has an attribute that holds model summaries
model_object = data %&amp;gt;% 
  group_by(model) %&amp;gt;% 
  nest() %&amp;gt;% 
  mutate(mod_lm = map(data, ~lm(y~x, data = .x) %&amp;gt;% summary())) %&amp;gt;% 
  mutate(mod_aic = map(mod_lm, ~.x$r.squared))

#this object just has nested data with no special objects
nested_data_only = model_object %&amp;gt;% 
  select(!c(mod_lm))

print(model_object)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
## # Groups:   model [4]
##   model   data                     mod_lm     mod_aic  
##   &amp;lt;chr&amp;gt;   &amp;lt;list&amp;gt;                   &amp;lt;list&amp;gt;     &amp;lt;list&amp;gt;   
## 1 model_1 &amp;lt;tibble [1,250,000 x 3]&amp;gt; &amp;lt;smmry.lm&amp;gt; &amp;lt;dbl [1]&amp;gt;
## 2 model_2 &amp;lt;tibble [1,250,000 x 3]&amp;gt; &amp;lt;smmry.lm&amp;gt; &amp;lt;dbl [1]&amp;gt;
## 3 model_3 &amp;lt;tibble [1,250,000 x 3]&amp;gt; &amp;lt;smmry.lm&amp;gt; &amp;lt;dbl [1]&amp;gt;
## 4 model_4 &amp;lt;tibble [1,250,000 x 3]&amp;gt; &amp;lt;smmry.lm&amp;gt; &amp;lt;dbl [1]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;nested-data-only-objects&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Nested Data-Only Objects&lt;/h3&gt;
&lt;p&gt;We can apply any method here besides the basic &lt;code&gt;write.csv2()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tempdir = tempdir()

df_bench = c(&amp;quot;qs&amp;quot;, &amp;quot;rds&amp;quot;, &amp;quot;arrow&amp;quot;, &amp;quot;parquet&amp;quot;) %&amp;gt;% 
  map_df(~save_and_read_data(
    extension = .x
    ,data = nested_data_only
    ,dir = tempdir)) %&amp;gt;% 
  mutate(
    time_adj = round(time_elapsed/time_elapsed[1], 1)
    ,size_adj = round(size/size[1], 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to compare each method.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-2&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;extension&#34;:[&#34;qs&#34;,&#34;rds&#34;,&#34;arrow&#34;,&#34;parquet&#34;],&#34;time_elapsed&#34;:[0.94,2.62,0.41,0.97],&#34;size&#34;:[37123184,105001438,85007666,64014978],&#34;time_adj&#34;:[1,2.8,0.4,1],&#34;size_adj&#34;:[1,2.8,2.3,1.7]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;extension&#34;,&#34;name&#34;:&#34;extension&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;time_elapsed&#34;,&#34;name&#34;:&#34;time_elapsed&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size&#34;,&#34;name&#34;:&#34;size&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;time_adj&#34;,&#34;name&#34;:&#34;time_adj&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size_adj&#34;,&#34;name&#34;:&#34;size_adj&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;2ea280245dfab83883d42833a1179147&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;nested-objects-with-special-attribute&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Nested Objects with Special Attribute&lt;/h3&gt;
&lt;p&gt;In this case we perform a common modeling workflow on the data we created above - notice the model object contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;original data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lm summary objects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AIC objects&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can only apply &lt;code&gt;qs&lt;/code&gt; and &lt;code&gt;rds&lt;/code&gt; methods to save model objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tempdir = tempdir()

df_bench = c(&amp;quot;qs&amp;quot;, &amp;quot;rds&amp;quot;) %&amp;gt;% 
  map_df(~save_and_read_data(
    extension = .x
    ,data = nested_data_only
    ,dir = tempdir)) %&amp;gt;% 
  mutate(
    time_adj = round(time_elapsed/time_elapsed[1], 1)
    ,size_adj = round(size/size[1], 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to compare each method again.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-3&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;extension&#34;:[&#34;qs&#34;,&#34;rds&#34;],&#34;time_elapsed&#34;:[0.79,2.38],&#34;size&#34;:[37123184,105001438],&#34;time_adj&#34;:[1,3],&#34;size_adj&#34;:[1,2.8]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;extension&#34;,&#34;name&#34;:&#34;extension&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;time_elapsed&#34;,&#34;name&#34;:&#34;time_elapsed&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size&#34;,&#34;name&#34;:&#34;size&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;time_adj&#34;,&#34;name&#34;:&#34;time_adj&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size_adj&#34;,&#34;name&#34;:&#34;size_adj&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;d49478f7d6a0d4e7fb0fe3e7eeb84256&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;WOW! &lt;code&gt;qs&lt;/code&gt; really takes the cake! I know what I’m using from here on out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;spatial-objects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spatial Objects&lt;/h2&gt;
&lt;p&gt;Lastly, we’re going to take a look at saving spatial data still in a spatial format.&lt;/p&gt;
&lt;p&gt;Turns out that, like the lm nested dataframe above, arrow and parquet file types can store GIS objects.&lt;/p&gt;
&lt;p&gt;This isn’t a big deal as spatial object can be converted to a non-spatial object with the geometry defined via WKT and then saved with &lt;code&gt;arrow&lt;/code&gt; and &lt;code&gt;parquet&lt;/code&gt;…. dealers choice!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mapview)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;mapview&amp;#39; was built under R version 4.1.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;breweries_big = breweries %&amp;gt;% 
  sample_n(size = 500, replace = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tempdir = tempdir()

df_bench = c(&amp;quot;qs&amp;quot;, &amp;quot;rds&amp;quot;) %&amp;gt;% 
  map_df(~save_and_read_data(
    extension = .x
    ,data = breweries_big
    ,dir = tempdir)) %&amp;gt;% 
  mutate(
    time_adj = round(time_elapsed/time_elapsed[1], 1)
    ,size_adj = round(size/size[1], 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to compare each method again.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-4&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;extension&#34;:[&#34;qs&#34;,&#34;rds&#34;],&#34;time_elapsed&#34;:[0.02,0.03],&#34;size&#34;:[16628,107782],&#34;time_adj&#34;:[1,1.5],&#34;size_adj&#34;:[1,6.5]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;extension&#34;,&#34;name&#34;:&#34;extension&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;time_elapsed&#34;,&#34;name&#34;:&#34;time_elapsed&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size&#34;,&#34;name&#34;:&#34;size&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;time_adj&#34;,&#34;name&#34;:&#34;time_adj&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;size_adj&#34;,&#34;name&#34;:&#34;size_adj&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;e082e41f53a7098753b074b1d47d4d13&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;wrap-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Looks like your best bet is going to be &lt;code&gt;qs&lt;/code&gt; or &lt;code&gt;arrow&lt;/code&gt; - balancing time with storage space when you make that decision.&lt;/p&gt;
&lt;p&gt;If you have more complex objects with different objects nested in attributes or spatial objects you will be required to use &lt;code&gt;qs&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Kara ❤️ Elon</title>
        <link>https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/</link>
        <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/</guid>
        <description>
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/selectize/css/selectize.bootstrap3.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/selectize/js/selectize.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/crosstalk/css/crosstalk.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;
&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/index_files/bootstrap-grid/bootstrap-grid.min.css&#34; rel=&#34;stylesheet&#34; /&gt;


&lt;div id=&#34;intro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Kara loves to talk about Elon Musk.&lt;/p&gt;
&lt;p&gt;A couple of friends asked me how often I thought Kara directly mentions/talks about Elon Musk&lt;/p&gt;
&lt;p&gt;This is my attempt to quantify that.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;method&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Method&lt;/h1&gt;
&lt;p&gt;The data used for this was copied directly from the Apple Podcast App website.&lt;/p&gt;
&lt;p&gt;I only use show note descriptions so any reference to Elon in a podcast but not in the show notes will not be counted.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Monthly frequency of tech personalities direct mentions in Pivot podcast descriptions.&lt;/p&gt;
&lt;div class=&#34;container-fluid crosstalk-bscols&#34;&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12&#34;&gt;
&lt;div id=&#34;id_1_zz&#34; class=&#34;form-group crosstalk-input-select crosstalk-input&#34;&gt;
&lt;label class=&#34;control-label&#34; for=&#34;id_1_zz&#34;&gt;Pick an Asshole: &lt;/label&gt;
&lt;div&gt;
&lt;select multiple&gt;&lt;/select&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;id_1_zz&#34;&gt;{
  &#34;items&#34;: {
    &#34;value&#34;: [&#34;Bezos&#34;, &#34;Elon&#34;, &#34;Zuckerberg&#34;],
    &#34;label&#34;: [&#34;Bezos&#34;, &#34;Elon&#34;, &#34;Zuckerberg&#34;]
  },
  &#34;map&#34;: {
    &#34;Bezos&#34;: [&#34;1&#34;, &#34;4&#34;, &#34;7&#34;, &#34;10&#34;, &#34;13&#34;, &#34;16&#34;, &#34;19&#34;, &#34;22&#34;, &#34;25&#34;, &#34;28&#34;, &#34;31&#34;, &#34;34&#34;, &#34;37&#34;, &#34;40&#34;, &#34;43&#34;, &#34;46&#34;, &#34;49&#34;, &#34;52&#34;, &#34;55&#34;, &#34;58&#34;, &#34;61&#34;, &#34;64&#34;, &#34;67&#34;, &#34;70&#34;, &#34;73&#34;, &#34;76&#34;, &#34;79&#34;, &#34;82&#34;, &#34;85&#34;, &#34;88&#34;, &#34;91&#34;, &#34;94&#34;, &#34;97&#34;, &#34;100&#34;, &#34;103&#34;, &#34;106&#34;, &#34;109&#34;, &#34;112&#34;, &#34;115&#34;, &#34;118&#34;, &#34;121&#34;, &#34;124&#34;, &#34;127&#34;, &#34;130&#34;, &#34;133&#34;, &#34;136&#34;, &#34;139&#34;],
    &#34;Elon&#34;: [&#34;2&#34;, &#34;5&#34;, &#34;8&#34;, &#34;11&#34;, &#34;14&#34;, &#34;17&#34;, &#34;20&#34;, &#34;23&#34;, &#34;26&#34;, &#34;29&#34;, &#34;32&#34;, &#34;35&#34;, &#34;38&#34;, &#34;41&#34;, &#34;44&#34;, &#34;47&#34;, &#34;50&#34;, &#34;53&#34;, &#34;56&#34;, &#34;59&#34;, &#34;62&#34;, &#34;65&#34;, &#34;68&#34;, &#34;71&#34;, &#34;74&#34;, &#34;77&#34;, &#34;80&#34;, &#34;83&#34;, &#34;86&#34;, &#34;89&#34;, &#34;92&#34;, &#34;95&#34;, &#34;98&#34;, &#34;101&#34;, &#34;104&#34;, &#34;107&#34;, &#34;110&#34;, &#34;113&#34;, &#34;116&#34;, &#34;119&#34;, &#34;122&#34;, &#34;125&#34;, &#34;128&#34;, &#34;131&#34;, &#34;134&#34;, &#34;137&#34;, &#34;140&#34;],
    &#34;Zuckerberg&#34;: [&#34;3&#34;, &#34;6&#34;, &#34;9&#34;, &#34;12&#34;, &#34;15&#34;, &#34;18&#34;, &#34;21&#34;, &#34;24&#34;, &#34;27&#34;, &#34;30&#34;, &#34;33&#34;, &#34;36&#34;, &#34;39&#34;, &#34;42&#34;, &#34;45&#34;, &#34;48&#34;, &#34;51&#34;, &#34;54&#34;, &#34;57&#34;, &#34;60&#34;, &#34;63&#34;, &#34;66&#34;, &#34;69&#34;, &#34;72&#34;, &#34;75&#34;, &#34;78&#34;, &#34;81&#34;, &#34;84&#34;, &#34;87&#34;, &#34;90&#34;, &#34;93&#34;, &#34;96&#34;, &#34;99&#34;, &#34;102&#34;, &#34;105&#34;, &#34;108&#34;, &#34;111&#34;, &#34;114&#34;, &#34;117&#34;, &#34;120&#34;, &#34;123&#34;, &#34;126&#34;, &#34;129&#34;, &#34;132&#34;, &#34;135&#34;, &#34;138&#34;, &#34;141&#34;]
  },
  &#34;group&#34;: [&#34;SharedDatabb0e61b6&#34;]
}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;col-xs-12&#34;&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-02-01&#34;,&#34;2019-03-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-08-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[1,1,1,0,1,0,0,0,0,2,3,1,1,1,3,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],&#34;legendgroup&#34;:&#34;Bezos&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;1&#34;,&#34;4&#34;,&#34;7&#34;,&#34;10&#34;,&#34;13&#34;,&#34;16&#34;,&#34;19&#34;,&#34;22&#34;,&#34;25&#34;,&#34;28&#34;,&#34;31&#34;,&#34;34&#34;,&#34;37&#34;,&#34;40&#34;,&#34;43&#34;,&#34;46&#34;,&#34;49&#34;,&#34;52&#34;,&#34;55&#34;,&#34;58&#34;,&#34;61&#34;,&#34;64&#34;,&#34;67&#34;,&#34;70&#34;,&#34;73&#34;,&#34;76&#34;,&#34;79&#34;,&#34;82&#34;,&#34;85&#34;,&#34;88&#34;,&#34;91&#34;,&#34;94&#34;,&#34;97&#34;,&#34;100&#34;,&#34;103&#34;,&#34;106&#34;,&#34;109&#34;,&#34;112&#34;,&#34;115&#34;,&#34;118&#34;,&#34;121&#34;,&#34;124&#34;,&#34;127&#34;,&#34;130&#34;,&#34;133&#34;,&#34;136&#34;,&#34;139&#34;],&#34;set&#34;:&#34;SharedDatabb0e61b6&#34;,&#34;name&#34;:&#34;Bezos&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-02-01&#34;,&#34;2019-03-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-08-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,1,1,2,0,0,1,2,2,3,3,8,5,4,4,2,5,7,7,3,2,5,1,2,4,1,3,1,4,1,1],&#34;legendgroup&#34;:&#34;Elon&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;2&#34;,&#34;5&#34;,&#34;8&#34;,&#34;11&#34;,&#34;14&#34;,&#34;17&#34;,&#34;20&#34;,&#34;23&#34;,&#34;26&#34;,&#34;29&#34;,&#34;32&#34;,&#34;35&#34;,&#34;38&#34;,&#34;41&#34;,&#34;44&#34;,&#34;47&#34;,&#34;50&#34;,&#34;53&#34;,&#34;56&#34;,&#34;59&#34;,&#34;62&#34;,&#34;65&#34;,&#34;68&#34;,&#34;71&#34;,&#34;74&#34;,&#34;77&#34;,&#34;80&#34;,&#34;83&#34;,&#34;86&#34;,&#34;89&#34;,&#34;92&#34;,&#34;95&#34;,&#34;98&#34;,&#34;101&#34;,&#34;104&#34;,&#34;107&#34;,&#34;110&#34;,&#34;113&#34;,&#34;116&#34;,&#34;119&#34;,&#34;122&#34;,&#34;125&#34;,&#34;128&#34;,&#34;131&#34;,&#34;134&#34;,&#34;137&#34;,&#34;140&#34;],&#34;set&#34;:&#34;SharedDatabb0e61b6&#34;,&#34;name&#34;:&#34;Elon&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-02-01&#34;,&#34;2019-03-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-08-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[0,0,0,1,2,1,3,1,0,1,1,0,1,2,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,3,0,0,0],&#34;legendgroup&#34;:&#34;Zuckerberg&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;3&#34;,&#34;6&#34;,&#34;9&#34;,&#34;12&#34;,&#34;15&#34;,&#34;18&#34;,&#34;21&#34;,&#34;24&#34;,&#34;27&#34;,&#34;30&#34;,&#34;33&#34;,&#34;36&#34;,&#34;39&#34;,&#34;42&#34;,&#34;45&#34;,&#34;48&#34;,&#34;51&#34;,&#34;54&#34;,&#34;57&#34;,&#34;60&#34;,&#34;63&#34;,&#34;66&#34;,&#34;69&#34;,&#34;72&#34;,&#34;75&#34;,&#34;78&#34;,&#34;81&#34;,&#34;84&#34;,&#34;87&#34;,&#34;90&#34;,&#34;93&#34;,&#34;96&#34;,&#34;99&#34;,&#34;102&#34;,&#34;105&#34;,&#34;108&#34;,&#34;111&#34;,&#34;114&#34;,&#34;117&#34;,&#34;120&#34;,&#34;123&#34;,&#34;126&#34;,&#34;129&#34;,&#34;132&#34;,&#34;135&#34;,&#34;138&#34;,&#34;141&#34;],&#34;set&#34;:&#34;SharedDatabb0e61b6&#34;,&#34;name&#34;:&#34;Zuckerberg&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-02-01&#34;,&#34;2019-03-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-08-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[0.25,0.25,0.17,0,0.25,0,0,0,0,0.22,0.38,0.12,0.11,0.11,0.38,0,0.12,0.11,0.12,0,0.12,0.11,0,0.07,0,0,0,0,0.1,0,0.1,0,0,0,0,0,0,0,0,0,0,0,0.12,0,0,0,0.25],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;1&#34;,&#34;4&#34;,&#34;7&#34;,&#34;10&#34;,&#34;13&#34;,&#34;16&#34;,&#34;19&#34;,&#34;22&#34;,&#34;25&#34;,&#34;28&#34;,&#34;31&#34;,&#34;34&#34;,&#34;37&#34;,&#34;40&#34;,&#34;43&#34;,&#34;46&#34;,&#34;49&#34;,&#34;52&#34;,&#34;55&#34;,&#34;58&#34;,&#34;61&#34;,&#34;64&#34;,&#34;67&#34;,&#34;70&#34;,&#34;73&#34;,&#34;76&#34;,&#34;79&#34;,&#34;82&#34;,&#34;85&#34;,&#34;88&#34;,&#34;91&#34;,&#34;94&#34;,&#34;97&#34;,&#34;100&#34;,&#34;103&#34;,&#34;106&#34;,&#34;109&#34;,&#34;112&#34;,&#34;115&#34;,&#34;118&#34;,&#34;121&#34;,&#34;124&#34;,&#34;127&#34;,&#34;130&#34;,&#34;133&#34;,&#34;136&#34;,&#34;139&#34;],&#34;set&#34;:&#34;SharedDatabb0e61b6&#34;,&#34;name&#34;:&#34;Bezos&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-02-01&#34;,&#34;2019-03-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-08-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[0.25,0,0,0,0.25,0,0,0,0.14,0,0,0,0.22,0,0,0,0.12,0.11,0.12,0.22,0,0,0.14,0.14,0.25,0.3,0.3,0.89,0.5,0.5,0.4,0.22,0.33,0.78,0.78,0.33,0.22,0.62,0.1,0.25,0.44,0.11,0.38,0.11,0.4,0.09,0.25],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;2&#34;,&#34;5&#34;,&#34;8&#34;,&#34;11&#34;,&#34;14&#34;,&#34;17&#34;,&#34;20&#34;,&#34;23&#34;,&#34;26&#34;,&#34;29&#34;,&#34;32&#34;,&#34;35&#34;,&#34;38&#34;,&#34;41&#34;,&#34;44&#34;,&#34;47&#34;,&#34;50&#34;,&#34;53&#34;,&#34;56&#34;,&#34;59&#34;,&#34;62&#34;,&#34;65&#34;,&#34;68&#34;,&#34;71&#34;,&#34;74&#34;,&#34;77&#34;,&#34;80&#34;,&#34;83&#34;,&#34;86&#34;,&#34;89&#34;,&#34;92&#34;,&#34;95&#34;,&#34;98&#34;,&#34;101&#34;,&#34;104&#34;,&#34;107&#34;,&#34;110&#34;,&#34;113&#34;,&#34;116&#34;,&#34;119&#34;,&#34;122&#34;,&#34;125&#34;,&#34;128&#34;,&#34;131&#34;,&#34;134&#34;,&#34;137&#34;,&#34;140&#34;],&#34;set&#34;:&#34;SharedDatabb0e61b6&#34;,&#34;name&#34;:&#34;Elon&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-02-01&#34;,&#34;2019-03-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-04-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-08-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[0,0,0,0.2,0.5,0.25,0.6,0.2,0,0.11,0.12,0,0.11,0.22,0.38,0.1,0,0.11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.07,0.11,0.11,0,0.11,0.12,0,0,0,0.11,0.12,0.33,0,0,0],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;3&#34;,&#34;6&#34;,&#34;9&#34;,&#34;12&#34;,&#34;15&#34;,&#34;18&#34;,&#34;21&#34;,&#34;24&#34;,&#34;27&#34;,&#34;30&#34;,&#34;33&#34;,&#34;36&#34;,&#34;39&#34;,&#34;42&#34;,&#34;45&#34;,&#34;48&#34;,&#34;51&#34;,&#34;54&#34;,&#34;57&#34;,&#34;60&#34;,&#34;63&#34;,&#34;66&#34;,&#34;69&#34;,&#34;72&#34;,&#34;75&#34;,&#34;78&#34;,&#34;81&#34;,&#34;84&#34;,&#34;87&#34;,&#34;90&#34;,&#34;93&#34;,&#34;96&#34;,&#34;99&#34;,&#34;102&#34;,&#34;105&#34;,&#34;108&#34;,&#34;111&#34;,&#34;114&#34;,&#34;117&#34;,&#34;120&#34;,&#34;123&#34;,&#34;126&#34;,&#34;129&#34;,&#34;132&#34;,&#34;135&#34;,&#34;138&#34;,&#34;141&#34;],&#34;set&#34;:&#34;SharedDatabb0e61b6&#34;,&#34;name&#34;:&#34;Zuckerberg&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;title&#34;:&#34;Year&#34;,&#34;anchor&#34;:&#34;y2&#34;},&#34;yaxis2&#34;:{&#34;domain&#34;:[0,0.38],&#34;automargin&#34;:true,&#34;title&#34;:&#34;Percent&#34;,&#34;anchor&#34;:&#34;x&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0.42,1],&#34;automargin&#34;:true,&#34;title&#34;:&#34;Count&#34;,&#34;anchor&#34;:&#34;x&#34;},&#34;annotations&#34;:[],&#34;shapes&#34;:[],&#34;images&#34;:[],&#34;margin&#34;:{&#34;b&#34;:40,&#34;l&#34;:60,&#34;t&#34;:25,&#34;r&#34;:10},&#34;dragmode&#34;:&#34;zoom&#34;,&#34;hovermode&#34;:&#34;closest&#34;,&#34;showlegend&#34;:true},&#34;attrs&#34;:{&#34;5ae46961a06&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;legendgroup&#34;:{},&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;color&#34;:{},&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;type&#34;:&#34;scatter&#34;},&#34;5ae420ed582b&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;legendgroup&#34;:{},&#34;showlegend&#34;:false,&#34;color&#34;:{},&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;type&#34;:&#34;bar&#34;}},&#34;source&#34;:&#34;A&#34;,&#34;config&#34;:{&#34;modeBarButtonsToAdd&#34;:[&#34;hoverclosest&#34;,&#34;hovercompare&#34;],&#34;showSendToCloud&#34;:false},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0,&#34;ctGroups&#34;:[&#34;SharedDatabb0e61b6&#34;]},&#34;subplot&#34;:true,&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Specifically Elon and Elon affiliated stuff. 🚀 🚀 🚀&lt;/p&gt;
&lt;div class=&#34;container-fluid crosstalk-bscols&#34;&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12&#34;&gt;
&lt;div id=&#34;id_1_zz&#34; class=&#34;form-group crosstalk-input-select crosstalk-input&#34;&gt;
&lt;label class=&#34;control-label&#34; for=&#34;id_1_zz&#34;&gt;Pick a Variable: &lt;/label&gt;
&lt;div&gt;
&lt;select multiple&gt;&lt;/select&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;id_1_zz&#34;&gt;{
  &#34;items&#34;: {
    &#34;value&#34;: [&#34;Elon&#34;, &#34;Elon|Twitter&#34;, &#34;SpaceX&#34;, &#34;Tesla&#34;, &#34;Twitter&#34;],
    &#34;label&#34;: [&#34;Elon&#34;, &#34;Elon|Twitter&#34;, &#34;SpaceX&#34;, &#34;Tesla&#34;, &#34;Twitter&#34;]
  },
  &#34;map&#34;: {
    &#34;Elon&#34;: [&#34;1&#34;, &#34;6&#34;, &#34;21&#34;, &#34;33&#34;, &#34;54&#34;, &#34;58&#34;, &#34;62&#34;, &#34;66&#34;, &#34;72&#34;, &#34;75&#34;, &#34;80&#34;, &#34;90&#34;, &#34;94&#34;, &#34;98&#34;, &#34;101&#34;, &#34;105&#34;, &#34;109&#34;, &#34;113&#34;, &#34;117&#34;, &#34;120&#34;, &#34;123&#34;, &#34;126&#34;, &#34;129&#34;, &#34;133&#34;, &#34;137&#34;, &#34;141&#34;, &#34;144&#34;, &#34;147&#34;, &#34;152&#34;, &#34;156&#34;, &#34;159&#34;, &#34;163&#34;, &#34;167&#34;],
    &#34;Elon|Twitter&#34;: [&#34;2&#34;, &#34;4&#34;, &#34;7&#34;, &#34;9&#34;, &#34;11&#34;, &#34;14&#34;, &#34;16&#34;, &#34;19&#34;, &#34;22&#34;, &#34;24&#34;, &#34;27&#34;, &#34;30&#34;, &#34;34&#34;, &#34;38&#34;, &#34;40&#34;, &#34;44&#34;, &#34;47&#34;, &#34;49&#34;, &#34;51&#34;, &#34;55&#34;, &#34;59&#34;, &#34;63&#34;, &#34;67&#34;, &#34;68&#34;, &#34;70&#34;, &#34;73&#34;, &#34;76&#34;, &#34;81&#34;, &#34;84&#34;, &#34;87&#34;, &#34;91&#34;, &#34;95&#34;, &#34;99&#34;, &#34;102&#34;, &#34;106&#34;, &#34;110&#34;, &#34;114&#34;, &#34;118&#34;, &#34;121&#34;, &#34;124&#34;, &#34;127&#34;, &#34;130&#34;, &#34;134&#34;, &#34;138&#34;, &#34;142&#34;, &#34;145&#34;, &#34;148&#34;, &#34;153&#34;, &#34;157&#34;, &#34;160&#34;, &#34;164&#34;, &#34;168&#34;],
    &#34;SpaceX&#34;: [&#34;35&#34;, &#34;43&#34;, &#34;60&#34;, &#34;77&#34;, &#34;85&#34;, &#34;149&#34;],
    &#34;Tesla&#34;: [&#34;3&#34;, &#34;8&#34;, &#34;12&#34;, &#34;17&#34;, &#34;25&#34;, &#34;28&#34;, &#34;31&#34;, &#34;36&#34;, &#34;41&#34;, &#34;45&#34;, &#34;52&#34;, &#34;56&#34;, &#34;64&#34;, &#34;78&#34;, &#34;82&#34;, &#34;88&#34;, &#34;92&#34;, &#34;96&#34;, &#34;103&#34;, &#34;107&#34;, &#34;111&#34;, &#34;115&#34;, &#34;131&#34;, &#34;135&#34;, &#34;139&#34;, &#34;150&#34;, &#34;154&#34;, &#34;161&#34;, &#34;165&#34;],
    &#34;Twitter&#34;: [&#34;5&#34;, &#34;10&#34;, &#34;13&#34;, &#34;15&#34;, &#34;18&#34;, &#34;20&#34;, &#34;23&#34;, &#34;26&#34;, &#34;29&#34;, &#34;32&#34;, &#34;37&#34;, &#34;39&#34;, &#34;42&#34;, &#34;46&#34;, &#34;48&#34;, &#34;50&#34;, &#34;53&#34;, &#34;57&#34;, &#34;61&#34;, &#34;65&#34;, &#34;69&#34;, &#34;71&#34;, &#34;74&#34;, &#34;79&#34;, &#34;83&#34;, &#34;86&#34;, &#34;89&#34;, &#34;93&#34;, &#34;97&#34;, &#34;100&#34;, &#34;104&#34;, &#34;108&#34;, &#34;112&#34;, &#34;116&#34;, &#34;119&#34;, &#34;122&#34;, &#34;125&#34;, &#34;128&#34;, &#34;132&#34;, &#34;136&#34;, &#34;140&#34;, &#34;143&#34;, &#34;146&#34;, &#34;151&#34;, &#34;155&#34;, &#34;158&#34;, &#34;162&#34;, &#34;166&#34;]
  },
  &#34;group&#34;: [&#34;SharedDatacad19eee&#34;]
}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;col-xs-12&#34;&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-04-01&#34;,&#34;2019-12-01&#34;,&#34;2020-05-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[1,1,1,2,1,1,1,2,1,2,2,3,3,8,5,4,4,2,5,7,7,3,2,5,1,2,4,1,3,1,4,1,1],&#34;legendgroup&#34;:&#34;Elon&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;1&#34;,&#34;6&#34;,&#34;21&#34;,&#34;33&#34;,&#34;54&#34;,&#34;58&#34;,&#34;62&#34;,&#34;66&#34;,&#34;72&#34;,&#34;75&#34;,&#34;80&#34;,&#34;90&#34;,&#34;94&#34;,&#34;98&#34;,&#34;101&#34;,&#34;105&#34;,&#34;109&#34;,&#34;113&#34;,&#34;117&#34;,&#34;120&#34;,&#34;123&#34;,&#34;126&#34;,&#34;129&#34;,&#34;133&#34;,&#34;137&#34;,&#34;141&#34;,&#34;144&#34;,&#34;147&#34;,&#34;152&#34;,&#34;156&#34;,&#34;159&#34;,&#34;163&#34;,&#34;167&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Elon&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-08-01&#34;,&#34;2019-09-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-09-01&#34;,&#34;2020-10-01&#34;,&#34;2020-11-01&#34;,&#34;2021-01-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2021-12-01&#34;,&#34;2022-01-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[1,1,1,1,1,2,2,2,3,3,1,3,2,3,3,2,1,1,2,4,2,3,2,1,3,4,6,4,3,5,5,7,9,6,7,6,7,8,9,8,7,6,7,6,6,8,6,5,3,5,2,1],&#34;legendgroup&#34;:&#34;Elon|Twitter&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;2&#34;,&#34;4&#34;,&#34;7&#34;,&#34;9&#34;,&#34;11&#34;,&#34;14&#34;,&#34;16&#34;,&#34;19&#34;,&#34;22&#34;,&#34;24&#34;,&#34;27&#34;,&#34;30&#34;,&#34;34&#34;,&#34;38&#34;,&#34;40&#34;,&#34;44&#34;,&#34;47&#34;,&#34;49&#34;,&#34;51&#34;,&#34;55&#34;,&#34;59&#34;,&#34;63&#34;,&#34;67&#34;,&#34;68&#34;,&#34;70&#34;,&#34;73&#34;,&#34;76&#34;,&#34;81&#34;,&#34;84&#34;,&#34;87&#34;,&#34;91&#34;,&#34;95&#34;,&#34;99&#34;,&#34;102&#34;,&#34;106&#34;,&#34;110&#34;,&#34;114&#34;,&#34;118&#34;,&#34;121&#34;,&#34;124&#34;,&#34;127&#34;,&#34;130&#34;,&#34;134&#34;,&#34;138&#34;,&#34;142&#34;,&#34;145&#34;,&#34;148&#34;,&#34;153&#34;,&#34;157&#34;,&#34;160&#34;,&#34;164&#34;,&#34;168&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Elon|Twitter&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2020-05-01&#34;,&#34;2020-08-01&#34;,&#34;2021-04-01&#34;,&#34;2021-10-01&#34;,&#34;2021-12-01&#34;,&#34;2023-06-01&#34;],&#34;y&#34;:[1,1,2,1,1,1],&#34;legendgroup&#34;:&#34;SpaceX&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;35&#34;,&#34;43&#34;,&#34;60&#34;,&#34;77&#34;,&#34;85&#34;,&#34;149&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;SpaceX&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-04-01&#34;,&#34;2019-08-01&#34;,&#34;2019-10-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-05-01&#34;,&#34;2020-07-01&#34;,&#34;2020-09-01&#34;,&#34;2021-01-01&#34;,&#34;2021-02-01&#34;,&#34;2021-05-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-01-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;],&#34;y&#34;:[1,1,2,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1],&#34;legendgroup&#34;:&#34;Tesla&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;3&#34;,&#34;8&#34;,&#34;12&#34;,&#34;17&#34;,&#34;25&#34;,&#34;28&#34;,&#34;31&#34;,&#34;36&#34;,&#34;41&#34;,&#34;45&#34;,&#34;52&#34;,&#34;56&#34;,&#34;64&#34;,&#34;78&#34;,&#34;82&#34;,&#34;88&#34;,&#34;92&#34;,&#34;96&#34;,&#34;103&#34;,&#34;107&#34;,&#34;111&#34;,&#34;115&#34;,&#34;131&#34;,&#34;135&#34;,&#34;139&#34;,&#34;150&#34;,&#34;154&#34;,&#34;161&#34;,&#34;165&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Tesla&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2019-01-01&#34;,&#34;2019-07-01&#34;,&#34;2019-08-01&#34;,&#34;2019-09-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-09-01&#34;,&#34;2020-10-01&#34;,&#34;2020-11-01&#34;,&#34;2021-01-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2021-12-01&#34;,&#34;2022-01-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;],&#34;y&#34;:[1,1,1,2,2,2,2,3,1,3,1,3,3,2,1,1,2,3,1,2,1,3,4,4,4,3,5,4,7,9,5,6,5,5,7,7,7,6,6,6,5,5,8,6,4,3,2,2],&#34;legendgroup&#34;:&#34;Twitter&#34;,&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;type&#34;:&#34;scatter&#34;,&#34;key&#34;:[&#34;5&#34;,&#34;10&#34;,&#34;13&#34;,&#34;15&#34;,&#34;18&#34;,&#34;20&#34;,&#34;23&#34;,&#34;26&#34;,&#34;29&#34;,&#34;32&#34;,&#34;37&#34;,&#34;39&#34;,&#34;42&#34;,&#34;46&#34;,&#34;48&#34;,&#34;50&#34;,&#34;53&#34;,&#34;57&#34;,&#34;61&#34;,&#34;65&#34;,&#34;69&#34;,&#34;71&#34;,&#34;74&#34;,&#34;79&#34;,&#34;83&#34;,&#34;86&#34;,&#34;89&#34;,&#34;93&#34;,&#34;97&#34;,&#34;100&#34;,&#34;104&#34;,&#34;108&#34;,&#34;112&#34;,&#34;116&#34;,&#34;119&#34;,&#34;122&#34;,&#34;125&#34;,&#34;128&#34;,&#34;132&#34;,&#34;136&#34;,&#34;140&#34;,&#34;143&#34;,&#34;146&#34;,&#34;151&#34;,&#34;155&#34;,&#34;158&#34;,&#34;162&#34;,&#34;166&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Twitter&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-04-01&#34;,&#34;2019-12-01&#34;,&#34;2020-05-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[0.25,0.25,0.142857142857143,0.222222222222222,0.125,0.111111111111111,0.125,0.222222222222222,0.142857142857143,0.142857142857143,0.25,0.3,0.3,0.888888888888889,0.5,0.5,0.4,0.222222222222222,0.333333333333333,0.777777777777778,0.777777777777778,0.333333333333333,0.222222222222222,0.625,0.1,0.25,0.444444444444444,0.111111111111111,0.375,0.111111111111111,0.4,0.0909090909090909,0.25],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;1&#34;,&#34;6&#34;,&#34;21&#34;,&#34;33&#34;,&#34;54&#34;,&#34;58&#34;,&#34;62&#34;,&#34;66&#34;,&#34;72&#34;,&#34;75&#34;,&#34;80&#34;,&#34;90&#34;,&#34;94&#34;,&#34;98&#34;,&#34;101&#34;,&#34;105&#34;,&#34;109&#34;,&#34;113&#34;,&#34;117&#34;,&#34;120&#34;,&#34;123&#34;,&#34;126&#34;,&#34;129&#34;,&#34;133&#34;,&#34;137&#34;,&#34;141&#34;,&#34;144&#34;,&#34;147&#34;,&#34;152&#34;,&#34;156&#34;,&#34;159&#34;,&#34;163&#34;,&#34;167&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Elon&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(102,194,165,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-01-01&#34;,&#34;2019-04-01&#34;,&#34;2019-07-01&#34;,&#34;2019-08-01&#34;,&#34;2019-09-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-09-01&#34;,&#34;2020-10-01&#34;,&#34;2020-11-01&#34;,&#34;2021-01-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-06-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2021-12-01&#34;,&#34;2022-01-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;,&#34;2023-11-01&#34;],&#34;y&#34;:[0.25,0.25,0.25,0.25,0.166666666666667,0.4,0.4,0.4,0.428571428571429,0.333333333333333,0.125,0.333333333333333,0.222222222222222,0.333333333333333,0.375,0.181818181818182,0.111111111111111,0.125,0.25,0.5,0.222222222222222,0.375,0.222222222222222,0.125,0.333333333333333,0.571428571428571,0.428571428571429,0.5,0.333333333333333,0.625,0.5,0.7,1,0.6,0.875,0.6,0.777777777777778,0.533333333333333,1,0.888888888888889,0.777777777777778,0.666666666666667,0.875,0.6,0.75,0.888888888888889,0.666666666666667,0.625,0.333333333333333,0.5,0.181818181818182,0.25],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;2&#34;,&#34;4&#34;,&#34;7&#34;,&#34;9&#34;,&#34;11&#34;,&#34;14&#34;,&#34;16&#34;,&#34;19&#34;,&#34;22&#34;,&#34;24&#34;,&#34;27&#34;,&#34;30&#34;,&#34;34&#34;,&#34;38&#34;,&#34;40&#34;,&#34;44&#34;,&#34;47&#34;,&#34;49&#34;,&#34;51&#34;,&#34;55&#34;,&#34;59&#34;,&#34;63&#34;,&#34;67&#34;,&#34;68&#34;,&#34;70&#34;,&#34;73&#34;,&#34;76&#34;,&#34;81&#34;,&#34;84&#34;,&#34;87&#34;,&#34;91&#34;,&#34;95&#34;,&#34;99&#34;,&#34;102&#34;,&#34;106&#34;,&#34;110&#34;,&#34;114&#34;,&#34;118&#34;,&#34;121&#34;,&#34;124&#34;,&#34;127&#34;,&#34;130&#34;,&#34;134&#34;,&#34;138&#34;,&#34;142&#34;,&#34;145&#34;,&#34;148&#34;,&#34;153&#34;,&#34;157&#34;,&#34;160&#34;,&#34;164&#34;,&#34;168&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Elon|Twitter&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(252,141,98,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2020-05-01&#34;,&#34;2020-08-01&#34;,&#34;2021-04-01&#34;,&#34;2021-10-01&#34;,&#34;2021-12-01&#34;,&#34;2023-06-01&#34;],&#34;y&#34;:[0.111111111111111,0.1,0.222222222222222,0.0714285714285714,0.111111111111111,0.111111111111111],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;35&#34;,&#34;43&#34;,&#34;60&#34;,&#34;77&#34;,&#34;85&#34;,&#34;149&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;SpaceX&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(141,160,203,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2018-10-01&#34;,&#34;2019-04-01&#34;,&#34;2019-08-01&#34;,&#34;2019-10-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-05-01&#34;,&#34;2020-07-01&#34;,&#34;2020-09-01&#34;,&#34;2021-01-01&#34;,&#34;2021-02-01&#34;,&#34;2021-05-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2022-01-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;],&#34;y&#34;:[0.25,0.25,0.333333333333333,0.2,0.111111111111111,0.125,0.111111111111111,0.111111111111111,0.125,0.0909090909090909,0.125,0.125,0.125,0.214285714285714,0.125,0.125,0.1,0.1,0.2,0.125,0.1,0.111111111111111,0.111111111111111,0.125,0.2,0.222222222222222,0.25,0.1,0.0909090909090909],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;3&#34;,&#34;8&#34;,&#34;12&#34;,&#34;17&#34;,&#34;25&#34;,&#34;28&#34;,&#34;31&#34;,&#34;36&#34;,&#34;41&#34;,&#34;45&#34;,&#34;52&#34;,&#34;56&#34;,&#34;64&#34;,&#34;78&#34;,&#34;82&#34;,&#34;88&#34;,&#34;92&#34;,&#34;96&#34;,&#34;103&#34;,&#34;107&#34;,&#34;111&#34;,&#34;115&#34;,&#34;131&#34;,&#34;135&#34;,&#34;139&#34;,&#34;150&#34;,&#34;154&#34;,&#34;161&#34;,&#34;165&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Tesla&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(231,138,195,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null},{&#34;x&#34;:[&#34;2019-01-01&#34;,&#34;2019-07-01&#34;,&#34;2019-08-01&#34;,&#34;2019-09-01&#34;,&#34;2019-10-01&#34;,&#34;2019-11-01&#34;,&#34;2019-12-01&#34;,&#34;2020-01-01&#34;,&#34;2020-02-01&#34;,&#34;2020-03-01&#34;,&#34;2020-05-01&#34;,&#34;2020-06-01&#34;,&#34;2020-07-01&#34;,&#34;2020-09-01&#34;,&#34;2020-10-01&#34;,&#34;2020-11-01&#34;,&#34;2021-01-01&#34;,&#34;2021-02-01&#34;,&#34;2021-04-01&#34;,&#34;2021-05-01&#34;,&#34;2021-07-01&#34;,&#34;2021-08-01&#34;,&#34;2021-09-01&#34;,&#34;2021-10-01&#34;,&#34;2021-11-01&#34;,&#34;2021-12-01&#34;,&#34;2022-01-01&#34;,&#34;2022-02-01&#34;,&#34;2022-03-01&#34;,&#34;2022-04-01&#34;,&#34;2022-05-01&#34;,&#34;2022-06-01&#34;,&#34;2022-07-01&#34;,&#34;2022-08-01&#34;,&#34;2022-09-01&#34;,&#34;2022-10-01&#34;,&#34;2022-11-01&#34;,&#34;2022-12-01&#34;,&#34;2023-01-01&#34;,&#34;2023-02-01&#34;,&#34;2023-03-01&#34;,&#34;2023-04-01&#34;,&#34;2023-05-01&#34;,&#34;2023-06-01&#34;,&#34;2023-07-01&#34;,&#34;2023-08-01&#34;,&#34;2023-09-01&#34;,&#34;2023-10-01&#34;],&#34;y&#34;:[0.25,0.25,0.166666666666667,0.4,0.4,0.4,0.285714285714286,0.333333333333333,0.125,0.333333333333333,0.111111111111111,0.333333333333333,0.375,0.181818181818182,0.111111111111111,0.125,0.25,0.375,0.111111111111111,0.25,0.125,0.333333333333333,0.571428571428571,0.285714285714286,0.5,0.333333333333333,0.625,0.4,0.7,1,0.5,0.75,0.5,0.555555555555556,0.466666666666667,0.777777777777778,0.777777777777778,0.666666666666667,0.666666666666667,0.75,0.5,0.625,0.888888888888889,0.666666666666667,0.5,0.333333333333333,0.2,0.181818181818182],&#34;legendgroup&#34;:true,&#34;showlegend&#34;:false,&#34;type&#34;:&#34;bar&#34;,&#34;key&#34;:[&#34;5&#34;,&#34;10&#34;,&#34;13&#34;,&#34;15&#34;,&#34;18&#34;,&#34;20&#34;,&#34;23&#34;,&#34;26&#34;,&#34;29&#34;,&#34;32&#34;,&#34;37&#34;,&#34;39&#34;,&#34;42&#34;,&#34;46&#34;,&#34;48&#34;,&#34;50&#34;,&#34;53&#34;,&#34;57&#34;,&#34;61&#34;,&#34;65&#34;,&#34;69&#34;,&#34;71&#34;,&#34;74&#34;,&#34;79&#34;,&#34;83&#34;,&#34;86&#34;,&#34;89&#34;,&#34;93&#34;,&#34;97&#34;,&#34;100&#34;,&#34;104&#34;,&#34;108&#34;,&#34;112&#34;,&#34;116&#34;,&#34;119&#34;,&#34;122&#34;,&#34;125&#34;,&#34;128&#34;,&#34;132&#34;,&#34;136&#34;,&#34;140&#34;,&#34;143&#34;,&#34;146&#34;,&#34;151&#34;,&#34;155&#34;,&#34;158&#34;,&#34;162&#34;,&#34;166&#34;],&#34;set&#34;:&#34;SharedDatacad19eee&#34;,&#34;name&#34;:&#34;Twitter&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(166,216,84,1)&#34;},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;_isNestedKey&#34;:false,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;title&#34;:&#34;Year&#34;,&#34;anchor&#34;:&#34;y2&#34;},&#34;yaxis2&#34;:{&#34;domain&#34;:[0,0.38],&#34;automargin&#34;:true,&#34;title&#34;:&#34;Percent&#34;,&#34;anchor&#34;:&#34;x&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0.42,1],&#34;automargin&#34;:true,&#34;title&#34;:&#34;Count&#34;,&#34;anchor&#34;:&#34;x&#34;},&#34;annotations&#34;:[],&#34;shapes&#34;:[],&#34;images&#34;:[],&#34;margin&#34;:{&#34;b&#34;:40,&#34;l&#34;:60,&#34;t&#34;:25,&#34;r&#34;:10},&#34;dragmode&#34;:&#34;zoom&#34;,&#34;hovermode&#34;:&#34;closest&#34;,&#34;showlegend&#34;:true},&#34;attrs&#34;:{&#34;5ae4646b12&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;legendgroup&#34;:{},&#34;mode&#34;:&#34;lines+markers&#34;,&#34;showlegend&#34;:true,&#34;color&#34;:{},&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;type&#34;:&#34;scatter&#34;},&#34;5ae45d017004&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;legendgroup&#34;:{},&#34;showlegend&#34;:false,&#34;color&#34;:{},&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;type&#34;:&#34;bar&#34;}},&#34;source&#34;:&#34;A&#34;,&#34;config&#34;:{&#34;modeBarButtonsToAdd&#34;:[&#34;hoverclosest&#34;,&#34;hovercompare&#34;],&#34;showSendToCloud&#34;:false},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0,&#34;ctGroups&#34;:[&#34;SharedDatacad19eee&#34;]},&#34;subplot&#34;:true,&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>5 Minute Tutorials: Tricks with Purrr::map() #1</title>
        <link>https://mikegaunt404.netlify.app/2023/10/13/quickie-purrr/</link>
        <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://mikegaunt404.netlify.app/2023/10/13/quickie-purrr/</guid>
        <description>


&lt;div id=&#34;quick-overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Quick Overview&lt;/h1&gt;
&lt;p&gt;Hi hi!&lt;br /&gt;
This is intended to be a very quick tutorial highlighting bite-sizeable and really helpful R tips.&lt;/p&gt;
&lt;div id=&#34;what-are-we-looking-at-today&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What are we looking at today&lt;/h2&gt;
&lt;p&gt;I wanted to share how to use &lt;code&gt;purrr::map()&lt;/code&gt; to apply function that produces more that one output (columns) to a dataframe.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;We ware going to make basic script that lists all files in a directory and its sub-directories that have a specific extension.&lt;br /&gt;
This was something that I needed to do at work and could not, for the life of me, find a file that I was looking for…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-you-need&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What you need&lt;/h2&gt;
&lt;p&gt;Libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;base-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Base Data&lt;/h2&gt;
&lt;p&gt;The code below makes the datafame that we will use for this tutorial&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;full_string_to_root = &amp;quot;&amp;lt;&amp;lt;put a full path to a directory that has a lot of R scripts in it&amp;gt;&amp;gt;&amp;quot;

#get all files in the root
files = list.files(
  full_string_to_root, recursive = TRUE
           ,include.dirs  = T, all.files = T)

#filter files for the root 
#split file paths to separate the file path and name in different columns 
#NOTE: this is wayyyyy more efficient with REGREX but I couldn&amp;#39;t make it work
temp_data = data.frame(paths = c(files[str_detect(files, &amp;quot;\\.R$&amp;quot;)]
                     ,files[str_detect(files, &amp;quot;\\.r$&amp;quot;)])) %&amp;gt;% 
  separate(col = &amp;quot;paths&amp;quot;, sep = &amp;quot;/&amp;quot;, into = paste0(&amp;quot;temp_&amp;quot;, 1:6), remove  = F) %&amp;gt;% 
  pivot_longer(cols = starts_with(&amp;quot;temp&amp;quot;)
               ,values_to = &amp;quot;file_name&amp;quot;) %&amp;gt;% 
  filter(!is.na(file_name)) %&amp;gt;% 
  mutate(name = parse_number(name)) %&amp;gt;% 
  group_by(paths) %&amp;gt;% 
  filter(name == max(name)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(paths = str_remove(paths, paste0(&amp;quot;/&amp;quot;, file_name))) %&amp;gt;% 
  select(paths, file_name)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-actual-tutorial&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The actual tutorial&lt;/h1&gt;
&lt;p&gt;So this is what my dataframe of files looks like…&lt;/p&gt;
&lt;p&gt;I hashed my files - randomly coded them - since they are sensitive:&lt;/p&gt;
&lt;p&gt;Yours should be something to the effect of &lt;code&gt;code folder&lt;/code&gt; &lt;code&gt;script.R&lt;/code&gt;. And it doesn’t matter how deep your folder tree goes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(temp_data_public)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 x 2
##    paths    file_name
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;    
##  1 77153098 0de5fce9 
##  2 77153098 725b41a5 
##  3 77153098 bf6c1f1f 
##  4 01e4bef1 48d12269 
##  5 7580e145 e308db7c 
##  6 25e8962b c5387cc9 
##  7 25e8962b 5e135a29 
##  8 25e8962b 35ed1bd3 
##  9 25e8962b eee54f9a 
## 10 25e8962b ae7dbbcc 
## # i 24 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is cool, we listed all the files below our root director but the names alone don’t tell us much.&lt;/p&gt;
&lt;p&gt;To make it more useful, we will add columns indicating when it was made and last modified.&lt;/p&gt;
&lt;p&gt;I’m going to do this by supplying the &lt;code&gt;file.info()&lt;/code&gt; with a full path of each script in our DF via the &lt;code&gt;here::here()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;It’s easy for just one file at a time:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;here::here(
  full_string_to_root
  ,temp_data$paths[1]
  ,temp_data$file_name[1]) %&amp;gt;% 
  file.info() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            size isdir mode               mtime
## example_file_path_for_file 8621 FALSE  666 2023-08-10 10:47:50
##                                          ctime               atime exe
## example_file_path_for_file 2023-06-02 16:13:18 2023-10-13 15:07:43  no&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we apply this to each record of our DF.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_df = temp_data %&amp;gt;% 
  mutate(file_info = here::here(
    full_string_to_root
    ,temp_data$paths
    ,temp_data$file_name) %&amp;gt;% 
      file.info())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a look at what we just made:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 x 3
##    paths    file_name file_info$size $isdir $mode     $mtime             
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;  &amp;lt;octmode&amp;gt; &amp;lt;dttm&amp;gt;             
##  1 77153098 0de5fce9            8621 FALSE  666       2023-08-10 10:47:50
##  2 77153098 725b41a5           27857 FALSE  666       2023-06-02 16:12:40
##  3 77153098 bf6c1f1f           12975 FALSE  666       2023-10-13 10:22:41
##  4 01e4bef1 48d12269           11259 FALSE  666       2023-10-11 15:48:19
##  5 7580e145 e308db7c            9891 FALSE  666       2023-03-16 10:23:23
##  6 25e8962b c5387cc9           11155 FALSE  666       2023-04-25 15:22:27
##  7 25e8962b 5e135a29            4881 FALSE  666       2023-04-14 11:24:22
##  8 25e8962b 35ed1bd3            1011 FALSE  666       2023-02-14 14:17:28
##  9 25e8962b eee54f9a            1163 FALSE  666       2023-02-27 13:23:26
## 10 25e8962b ae7dbbcc            3519 FALSE  666       2023-02-27 13:23:04
## # i 24 more rows
## # i 3 more variables: file_info$ctime &amp;lt;dttm&amp;gt;, $atime &amp;lt;dttm&amp;gt;, $exe &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oops! It looks a little strange, the columns created by the &lt;code&gt;file.info()&lt;/code&gt; function all have &lt;code&gt;$s&lt;/code&gt; in front of them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(example_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;paths&amp;quot;     &amp;quot;file_name&amp;quot; &amp;quot;file_info&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(example_df$file_info)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;size&amp;quot;  &amp;quot;isdir&amp;quot; &amp;quot;mode&amp;quot;  &amp;quot;mtime&amp;quot; &amp;quot;ctime&amp;quot; &amp;quot;atime&amp;quot; &amp;quot;exe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems that we made a &lt;code&gt;file_info&lt;/code&gt; column that has columns of its own… hmmmmmm.&lt;/p&gt;
&lt;p&gt;This is a common problem you can run into this when the function you apply to your DF produces multiple output columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-fix&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The Fix&lt;/h1&gt;
&lt;p&gt;The fix is rather simple, we will use &lt;code&gt;purrr::map()&lt;/code&gt; to effectively make a nested column (much like the DF above) and unnest it to create a &lt;em&gt;normal&lt;/em&gt; looking DF.&lt;/p&gt;
&lt;p&gt;In essence, all you do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add a &lt;code&gt;map()&lt;/code&gt; function in the &lt;code&gt;mutate()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;supply the function with a column to run throught he function
&lt;ul&gt;
&lt;li&gt;Note in our case we are sending TWO columns and a string variable but they are collapsed together via the &lt;code&gt;here::here()&lt;/code&gt; - which is created as one by the &lt;code&gt;map()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;define the function to augment the supplied column with&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_df_pro = temp_data %&amp;gt;% 
  #start of the mutuate()
  mutate(info = map(   #applying the map()
    here::here(
      full_string_to_root
      ,paths
      ,file_name)    #end of the first input, defining what we will map thru
    ,file.info     #defining the function to apply - note: we do not include `()`
  )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_df_pro&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 x 3
##    paths    file_name info        
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;list&amp;gt;      
##  1 77153098 0de5fce9  &amp;lt;df [1 x 7]&amp;gt;
##  2 77153098 725b41a5  &amp;lt;df [1 x 7]&amp;gt;
##  3 77153098 bf6c1f1f  &amp;lt;df [1 x 7]&amp;gt;
##  4 01e4bef1 48d12269  &amp;lt;df [1 x 7]&amp;gt;
##  5 7580e145 e308db7c  &amp;lt;df [1 x 7]&amp;gt;
##  6 25e8962b c5387cc9  &amp;lt;df [1 x 7]&amp;gt;
##  7 25e8962b 5e135a29  &amp;lt;df [1 x 7]&amp;gt;
##  8 25e8962b 35ed1bd3  &amp;lt;df [1 x 7]&amp;gt;
##  9 25e8962b eee54f9a  &amp;lt;df [1 x 7]&amp;gt;
## 10 25e8962b ae7dbbcc  &amp;lt;df [1 x 7]&amp;gt;
## # i 24 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the first DF that we made but we no can see the size of the DF that is in each info record.&lt;/p&gt;
&lt;p&gt;We can expand this by running it through &lt;code&gt;unnest()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_df_pro_unnested = example_df_pro %&amp;gt;%  
  unnest(cols = info)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 x 9
##    paths    file_name  size isdir mode   mtime               ctime              
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;octm&amp;gt; &amp;lt;dttm&amp;gt;              &amp;lt;dttm&amp;gt;             
##  1 77153098 0de5fce9   8621 FALSE 666    2023-08-10 10:47:50 2023-06-02 16:13:18
##  2 77153098 725b41a5  27857 FALSE 666    2023-06-02 16:12:40 2023-06-01 08:07:54
##  3 77153098 bf6c1f1f  12975 FALSE 666    2023-10-13 10:22:41 2023-10-13 10:22:40
##  4 01e4bef1 48d12269  11259 FALSE 666    2023-10-11 15:48:19 2023-05-31 09:36:56
##  5 7580e145 e308db7c   9891 FALSE 666    2023-03-16 10:23:23 2023-02-22 10:03:33
##  6 25e8962b c5387cc9  11155 FALSE 666    2023-04-25 15:22:27 2023-04-25 15:19:46
##  7 25e8962b 5e135a29   4881 FALSE 666    2023-04-14 11:24:22 2023-04-07 14:21:43
##  8 25e8962b 35ed1bd3   1011 FALSE 666    2023-02-14 14:17:28 2023-02-14 14:17:28
##  9 25e8962b eee54f9a   1163 FALSE 666    2023-02-27 13:23:26 2023-02-27 13:23:26
## 10 25e8962b ae7dbbcc   3519 FALSE 666    2023-02-27 13:23:04 2023-02-27 13:23:04
## # i 24 more rows
## # i 2 more variables: atime &amp;lt;dttm&amp;gt;, exe &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you can see that we fixed the column issue….&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(example_df_pro_unnested)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;paths&amp;quot;     &amp;quot;file_name&amp;quot; &amp;quot;size&amp;quot;      &amp;quot;isdir&amp;quot;     &amp;quot;mode&amp;quot;      &amp;quot;mtime&amp;quot;    
## [7] &amp;quot;ctime&amp;quot;     &amp;quot;atime&amp;quot;     &amp;quot;exe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parting-words&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Parting words&lt;/h1&gt;
&lt;p&gt;So why do this?!??!?&lt;/p&gt;
&lt;p&gt;For a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to be able to deploy functions that have multiple outputs to a dataframe without creating a weird DF structure&lt;/li&gt;
&lt;li&gt;nesting DFs are a really great way to keep many augmentations to a DF in the same location
&lt;ul&gt;
&lt;li&gt;a lot of novices will do something to a DF and save it as a separate object&lt;/li&gt;
&lt;li&gt;this can confuse code, make it difficult to track objects for analysis&lt;/li&gt;
&lt;li&gt;this one object can be then saved as an RDS object! cool!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good luck and thanks for checking this out!&lt;/p&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Clean that Code up with purrr</title>
        <link>https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/</link>
        <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/</guid>
        <description>
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/crosstalk/css/crosstalk.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikegaunt404.netlify.app/2023/10/02/purrr-correlation-plots/index_files/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This blog serves as a brief tutorial on how to utilize the &lt;code&gt;purrr&lt;/code&gt; package by our studio to streamline and simplify complex or repetitive sections of code.&lt;/p&gt;
&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;One major advantage of working with us is the ability to leverage the power of the Tidyverse R package environment. This package environment, developed by RStudio, is designed to enhance the usability of R.&lt;/p&gt;
&lt;p&gt;An example of this enhancement is the use of ggplot for creating plots in R, as opposed to base R. &lt;code&gt;purrr&lt;/code&gt; is one of these packages aimed at:&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;
enhancing R’s functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors.
&lt;/center&gt;
&lt;/blockquote&gt;
&lt;p&gt;If this is your first encounter with vectorization in R, don’t worry. In essence, it’s a faster alternative to for loops. It involves iteratively providing a function with data and applying that function repeatedly to various subsets of the data. This concept is similar to using &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;lapply&lt;/code&gt;, or &lt;code&gt;sapply&lt;/code&gt; in base R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tutorial-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial Data&lt;/h1&gt;
&lt;p&gt;The data we will use in this tutorial is a data frame that records the travel times of buses for specific sections along a bus route.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;trip_id&lt;/code&gt;: Records a unique trip sequence, which we will not use for this tutorial.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;direction_id&lt;/code&gt;: Indicates the direction the bus is heading.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route_id&lt;/code&gt;, &lt;code&gt;date_time&lt;/code&gt;, and &lt;code&gt;vehicle_id&lt;/code&gt;: Not used in this tutorial.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment&lt;/code&gt;, &lt;code&gt;segment_name&lt;/code&gt;, and &lt;code&gt;segment_type&lt;/code&gt;: Attributes that describe the segment the bus is currently traveling over.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_diff&lt;/code&gt;: Records the segment travel time - what we are investigating.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flag_peak&lt;/code&gt;: Indicates the time of day.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_diff_pct&lt;/code&gt;: A calculated attribute indicating what percentage of an individual travel time segment is in proportion to a bus’s total route travel time - also what we are investigating.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_file &amp;lt;- &amp;quot;https://raw.githubusercontent.com/michaelgaunt404/michaelgaunt404_2/master/content/post/2023-10-02-purrr-correlation-plots/data_travel_times.csv&amp;quot;

data &amp;lt;- read.csv(data_file)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   X                                          trip_id direction_id route_id
## 1 1 10906003__MCOB-DO:171:5:Saturday:1:23MAR:41004:6  south_bound      202
## 2 2 10906003__MCOB-DO:171:5:Saturday:1:23MAR:41004:6  south_bound      202
## 3 3 10906003__MCOB-DO:171:5:Saturday:1:23MAR:41004:6  south_bound      202
## 4 4 10906003__MCOB-DO:171:5:Saturday:1:23MAR:41004:6  south_bound      202
## 5 5 10906003__MCOB-DO:171:5:Saturday:1:23MAR:41004:6  south_bound      202
## 6 6 10906003__MCOB-DO:171:5:Saturday:1:23MAR:41004:6  south_bound      202
##             date_time vehicle_id segement segement_name segement_type time_diff
## 1 2023-05-20 06:25:40      15106  459_712  Hewitt_100th       end_end      1082
## 2 2023-05-20 06:25:40      15106  482_459   23rd_Hewitt    middle_end       150
## 3 2023-05-20 06:23:10      15106  497_482     18th_23rd middle_middle        60
## 4 2023-05-20 06:21:39      15106  537_509     ramp_14th middle_middle       120
## 5 2023-05-20 06:19:39      15106  636_537      4th_ramp middle_middle       240
## 6 2023-05-20 06:15:39      15106  657_636     grove_4th middle_middle       180
##     ttl_diff speed_avg flag_peak time_diff_pct
## 1 12306.4810  25.44252    AMPeak    1.00000000
## 2  1018.9276  15.19517    AMPeak    0.13863216
## 3   961.5845  35.85005    AMPeak    0.05545287
## 4  1433.0578  26.71382    AMPeak    0.11090573
## 5  4793.1265  44.67465    AMPeak    0.22181146
## 6  1096.5308  13.62705    AMPeak    0.16635860&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are only concerned with travel time given the time-of-day and direction of travel, any attribute describing a unique bus, route, trip id, or timestamp when the measurement was recorded will be aggregated away.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tutorial-packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial Packages&lt;/h1&gt;
&lt;p&gt;The chunk below shows which packages will be using for this tutorial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(tidyverse) # entire tidyverse package suite - including purrr, dplyr, ggplot, etc
require(magrittr) # for code piping
require(lubridate) # for working with dates and datetimes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tutorial&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial&lt;/h1&gt;
&lt;p&gt;In this tutorial we will investigate &lt;code&gt;how each segment&#39;s travel time correlates with one another&lt;/code&gt;, along with the total route travel time.&lt;/p&gt;
&lt;p&gt;In essence, we aim to create a correlation matrix using the &lt;code&gt;stats::cor()&lt;/code&gt; function, considering the time of day and direction of travel as factors in our analysis. And to top it all off, we want to interact with these correlation matrices via a visualization.&lt;/p&gt;
&lt;p&gt;So first we apply some initial data processing to have our base working data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_processed &amp;lt;- data %&amp;gt;%
  filter(wday(date_time) %in% c(3, 4, 5)) %&amp;gt;% # grab only T, W, and TR
  pivot_wider(
    id_cols = c(&amp;quot;trip_id&amp;quot;, &amp;quot;direction_id&amp;quot;, &amp;quot;route_id&amp;quot;, &amp;quot;vehicle_id&amp;quot;, &amp;quot;flag_peak&amp;quot;),
    names_from = &amp;quot;segement_name&amp;quot;,
    values_from = &amp;quot;time_diff_pct&amp;quot;
  ) # convert from long to wide - data&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;common-pitfalls&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Common Pitfalls&lt;/h2&gt;
&lt;p&gt;Typically, individuals create separate data frame objects for various combinations of analysis factors.&lt;/p&gt;
&lt;p&gt;In our case, we have two factors for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time of day&lt;/code&gt;: AM and PM Peak&lt;/li&gt;
&lt;li&gt;&lt;code&gt;direction of travel&lt;/code&gt;: Southbound and Northbound&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This results in four distinct factor combinations for our correlation matrices.&lt;/p&gt;
&lt;p&gt;As seen below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor_am_nb &amp;lt;- data_processed %&amp;gt;%
  filter(flag_peak == &amp;quot;AMPeak&amp;quot;) %&amp;gt;%
  filter(direction_id != &amp;quot;south_bound&amp;quot;) %&amp;gt;%
  select(!trip_id:flag_peak) %&amp;gt;%
  cor(use = &amp;quot;pairwise.complete.obs&amp;quot;)

cor_am_sb &amp;lt;- data_processed %&amp;gt;%
  filter(flag_peak == &amp;quot;AMPeak&amp;quot;) %&amp;gt;%
  filter(direction_id != &amp;quot;south_bound&amp;quot;) %&amp;gt;%
  select(!trip_id:flag_peak) %&amp;gt;%
  cor(use = &amp;quot;pairwise.complete.obs&amp;quot;)

cor_pm_nb &amp;lt;- data_processed %&amp;gt;%
  filter(flag_peak == &amp;quot;AMPeak&amp;quot;) %&amp;gt;%
  filter(direction_id != &amp;quot;south_bound&amp;quot;) %&amp;gt;%
  select(!trip_id:flag_peak) %&amp;gt;%
  cor(use = &amp;quot;pairwise.complete.obs&amp;quot;)

cor_pm_sb &amp;lt;- data_processed %&amp;gt;%
  filter(flag_peak == &amp;quot;AMPeak&amp;quot;) %&amp;gt;%
  filter(direction_id != &amp;quot;south_bound&amp;quot;) %&amp;gt;%
  select(!trip_id:flag_peak) %&amp;gt;%
  cor(use = &amp;quot;pairwise.complete.obs&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then run each data frame object through a ggplot code snippet or some other plotting function….&lt;/p&gt;
&lt;p&gt;Again, resulting in the creation of an additional four objects as outlined below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor_pm_sb_plot &amp;lt;- cor_pm_sb %&amp;gt;%
  corrplot::corrplot(
    diag = T, type = &amp;quot;lower&amp;quot;, method = &amp;quot;color&amp;quot;,
    order = &amp;quot;hclust&amp;quot;
  )

cor_am_sb_plot &amp;lt;- cor_am_sb %&amp;gt;%
  corrplot::corrplot(
    diag = F, type = &amp;quot;lower&amp;quot;, method = &amp;quot;color&amp;quot;,
    order = &amp;quot;hclust&amp;quot;
  )

# you get the idea&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what’s the matter with this workflow….. a few things.&lt;/p&gt;
&lt;p&gt;Firstly, to create four plots, we end up with eight different data objects to manage. Handling such a large number of objects in your script can become unwieldy. Moreover, each object involves multiple filter statements and inputs that need precise copying and adjustments, leading to complex and cluttered code that can hinder your analysis.&lt;/p&gt;
&lt;p&gt;These problems become more pronounced when dealing with large datasets, numerous factor combinations, or comparing data objects created with different function inputs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A comment on for-loops:&lt;/p&gt;
&lt;p&gt;For loops may be the first solution to come to your mind, and they’re not a bad option. However, when coding in R, they introduce additional issues, including the following advantages of vectorization:”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clarity &amp;amp; Readability: Vectorization offers concise and readable code.&lt;/li&gt;
&lt;li&gt;Performance: Vectorized operations are often faster, especially for large datasets.&lt;/li&gt;
&lt;li&gt;Tidyverse Integration: Seamless integration with Tidyverse tools.&lt;/li&gt;
&lt;li&gt;Parallel Processing: Potential for efficient multi-core processing.&lt;/li&gt;
&lt;li&gt;Fewer Bugs: Reduced likelihood of off-by-one errors.&lt;/li&gt;
&lt;li&gt;Ease of Debugging: Simplified debugging process.&lt;/li&gt;
&lt;li&gt;Functional Programming: Aligns with R’s functional programming paradigm.&lt;/li&gt;
&lt;li&gt;Efficient Memory Usage: Minimizes unnecessary object creation.&lt;/li&gt;
&lt;li&gt;Consistency: Ensures uniform behavior across data types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;the-optimal-solution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Optimal Solution&lt;/h2&gt;
&lt;p&gt;How can we improve this by using R specific solutions? We aim for robust, clean, easily interpretable, and concise code. To achieve this, we’ll utilize the &lt;code&gt;nest()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; functions from the &lt;code&gt;purrr&lt;/code&gt; package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nest()&lt;/code&gt; creates a list-column of data frames, given specified grouping columns. It’s essentially a summarizing operation where you get one row for each group defined by non-nested columns.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt; is then used to apply functions to the list-column object&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;step-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;### Step 1&lt;/h2&gt;
&lt;p&gt;Define grouping variables and then nest the dataframe to a tibble.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_processed_nest &amp;lt;- data_processed %&amp;gt;%
  group_by(flag_peak, direction_id) %&amp;gt;%
  nest()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how each record is a unique &lt;code&gt;direction-time&lt;/code&gt; pair and all of the other data has been compressed into a list-column representing the time travel segments given the direction and time they are for.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(data_processed_nest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
## # Groups:   flag_peak, direction_id [4]
##   direction_id flag_peak data              
##   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;     &amp;lt;list&amp;gt;            
## 1 north_bound  AMPeak    &amp;lt;tibble [18 x 11]&amp;gt;
## 2 south_bound  AMPeak    &amp;lt;tibble [21 x 11]&amp;gt;
## 3 south_bound  PMPeak    &amp;lt;tibble [28 x 11]&amp;gt;
## 4 north_bound  PMPeak    &amp;lt;tibble [28 x 11]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can actually see that there are a few more records in bout the PM peak subsets than in the AM.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;### Step 2&lt;/h2&gt;
&lt;p&gt;Apply a &lt;code&gt;function&lt;/code&gt; to the subsetted data and make a new column that holds the ensuing objects….&lt;/p&gt;
&lt;p&gt;In this case, the function is all the code that falls between the curly &lt;code&gt;{...}&lt;/code&gt; braces.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.x&lt;/code&gt; represents the each subset of data that is held in the &lt;code&gt;data&lt;/code&gt;column - it is like a &lt;code&gt;lambda&lt;/code&gt; function in python.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_processed_nest_1 &amp;lt;- data_processed_nest %&amp;gt;%
  mutate(cor = map(
    data,
    ~ {
      .x %&amp;gt;%
        select(!c(trip_id:vehicle_id)) %&amp;gt;%
        cor(use = &amp;quot;pairwise.complete.obs&amp;quot;) %&amp;gt;%
        data.frame() %&amp;gt;%
        rename_with(~ str_remove_all(.x, &amp;quot;X&amp;quot;)) %&amp;gt;%
        mutate(seg = row.names(.))
    }
  ))

print(data_processed_nest_1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
## # Groups:   flag_peak, direction_id [4]
##   direction_id flag_peak data               cor         
##   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;     &amp;lt;list&amp;gt;             &amp;lt;list&amp;gt;      
## 1 north_bound  AMPeak    &amp;lt;tibble [18 x 11]&amp;gt; &amp;lt;df [8 x 9]&amp;gt;
## 2 south_bound  AMPeak    &amp;lt;tibble [21 x 11]&amp;gt; &amp;lt;df [8 x 9]&amp;gt;
## 3 south_bound  PMPeak    &amp;lt;tibble [28 x 11]&amp;gt; &amp;lt;df [8 x 9]&amp;gt;
## 4 north_bound  PMPeak    &amp;lt;tibble [28 x 11]&amp;gt; &amp;lt;df [8 x 9]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;nest&lt;/code&gt; object now has an additional &lt;code&gt;cor&lt;/code&gt;column that contains the correlation matrix for each direction-time pair data subset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;### Step 3&lt;/h2&gt;
&lt;p&gt;Unnest and ungroup the object so that you have a single dataframe where each direction-time correlation matrix has been row-bound together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_unnested &amp;lt;- data_processed_nest_1 %&amp;gt;%
  select(!data) %&amp;gt;%
  unnest(cols = cor) %&amp;gt;%
  ungroup()

print(head(data_unnested, 9) %&amp;gt;%
  reactable::reactable())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;to-wrap-up&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;To Wrap Up&lt;/h1&gt;
&lt;p&gt;In summary it should look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_processed_nest &amp;lt;- data_processed %&amp;gt;%
  group_by(flag_peak, direction_id) %&amp;gt;%
  nest() %&amp;gt;%
  mutate(cor = map(
    data,
    ~ {
      .x %&amp;gt;%
        select(!c(trip_id:vehicle_id)) %&amp;gt;%
        cor(use = &amp;quot;pairwise.complete.obs&amp;quot;) %&amp;gt;%
        data.frame() %&amp;gt;%
        rename_with(~ str_remove_all(.x, &amp;quot;X&amp;quot;)) %&amp;gt;%
        mutate(seg = row.names(.))
    }
  )) %&amp;gt;%
  select(!data) %&amp;gt;%
  unnest(cols = cor) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can now use that object for our analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- data_processed_nest %&amp;gt;%
  pivot_longer(
    cols = !c(direction_id, flag_peak, seg),
    names_to = &amp;quot;seg_1&amp;quot;
  ) %&amp;gt;%
  mutate(cor_value = round(value, 2)) %&amp;gt;%
  ggplot() +
  geom_tile(aes(seg, seg_1, fill = cor_value)) +
  scale_fill_gradient2(limits = c(-1, 1)) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_grid(
    rows = vars(direction_id),
    cols = vars(flag_peak)
  ) +
  labs(fill = &amp;quot;Cor Value&amp;quot;, x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;)

interactive_object &amp;lt;- plot %&amp;gt;% plotly::ggplotly()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:1200px;height:900px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8],&#34;y&#34;:[1,2,3,4,5,6,7,8],&#34;z&#34;:[[1,0.271794871794872,0.415384615384615,0.543589743589744,0.405128205128205,0.682051282051282,0.682051282051282,0.641025641025641],[0.271794871794872,1,0.297435897435897,0.241025641025641,0.343589743589744,0.143589743589744,0,0.21025641025641],[0.415384615384615,0.297435897435897,1,0.492307692307692,0.430769230769231,0.723076923076923,0.702564102564103,0.476923076923077],[0.543589743589744,0.241025641025641,0.492307692307692,1,0.630769230769231,0.538461538461539,0.769230769230769,0.492307692307692],[0.405128205128205,0.343589743589744,0.430769230769231,0.630769230769231,1,0.497435897435897,0.687179487179487,0.538461538461539],[0.682051282051282,0.143589743589744,0.723076923076923,0.538461538461539,0.497435897435897,1,0.815384615384615,0.553846153846154],[0.682051282051282,0,0.702564102564103,0.769230769230769,0.687179487179487,0.815384615384615,1,0.743589743589744],[0.641025641025641,0.21025641025641,0.476923076923077,0.492307692307692,0.538461538461539,0.553846153846154,0.743589743589744,1]],&#34;text&#34;:[[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.42&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.14&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.11&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.30&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.42&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.37&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.48&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.28&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.67&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.95&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.54&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.14&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.37&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.01&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.11&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.46&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.42&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.02&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.11&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.48&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.01&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.28&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.10&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.55&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.01&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.28&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.11&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.28&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.02&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.39&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.10&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.67&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.46&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.10&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.02&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.64&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.13&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value: -0.95&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.42&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.55&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.39&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.64&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.50&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.30&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.54&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.02&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.01&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.10&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.13&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.50&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  1.00&#34;]],&#34;colorscale&#34;:[[0,&#34;#8B302D&#34;],[0.143589743589744,&#34;#B26C65&#34;],[0.21025641025641,&#34;#C38781&#34;],[0.241025641025641,&#34;#CA948E&#34;],[0.271794871794872,&#34;#D1A19B&#34;],[0.297435897435897,&#34;#D7ACA7&#34;],[0.343589743589744,&#34;#E2C0BC&#34;],[0.405128205128205,&#34;#EFDBD8&#34;],[0.415384615384615,&#34;#F1DFDD&#34;],[0.430769230769231,&#34;#F4E6E4&#34;],[0.476923076923077,&#34;#FDFAFA&#34;],[0.492307692307692,&#34;#FDFDFE&#34;],[0.497435897435897,&#34;#FBFBFD&#34;],[0.538461538461539,&#34;#ECE9F5&#34;],[0.543589743589744,&#34;#EAE7F4&#34;],[0.553846153846154,&#34;#E6E3F2&#34;],[0.630769230769231,&#34;#CAC3E2&#34;],[0.641025641025641,&#34;#C6BFE0&#34;],[0.682051282051282,&#34;#B7AFD8&#34;],[0.687179487179487,&#34;#B6ADD7&#34;],[0.702564102564103,&#34;#B0A7D4&#34;],[0.723076923076923,&#34;#A89FD0&#34;],[0.743589743589744,&#34;#A197CC&#34;],[0.769230769230769,&#34;#978DC7&#34;],[0.815384615384615,&#34;#867CBD&#34;],[1,&#34;#3A3A98&#34;]],&#34;type&#34;:&#34;heatmap&#34;,&#34;showscale&#34;:false,&#34;autocolorscale&#34;:false,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8],&#34;y&#34;:[1,2,3,4,5,6,7,8],&#34;z&#34;:[[1,0.56020942408377,0.481675392670157,0.324607329842932,0.460732984293194,0.460732984293194,0.37696335078534,0.392670157068063],[0.56020942408377,1,0.371727748691099,0.413612565445026,0.612565445026178,0.361256544502618,0,0.612565445026178],[0.481675392670157,0.371727748691099,1,0.303664921465969,0.43455497382199,0.450261780104712,0.586387434554974,0.450261780104712],[0.324607329842932,0.413612565445026,0.303664921465969,1,0.429319371727749,0.345549738219895,0.539267015706806,0.43979057591623],[0.460732984293194,0.612565445026178,0.43455497382199,0.429319371727749,1,0.392670157068063,0.539267015706806,0.910994764397906],[0.460732984293194,0.361256544502618,0.450261780104712,0.345549738219895,0.392670157068063,1,0.570680628272251,0.429319371727749],[0.37696335078534,0,0.586387434554974,0.539267015706806,0.539267015706806,0.570680628272251,1,0.544502617801047],[0.392670157068063,0.612565445026178,0.450261780104712,0.43979057591623,0.910994764397906,0.429319371727749,0.544502617801047,1]],&#34;text&#34;:[[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.16&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.01&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.29&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.03&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.03&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.19&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.16&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.16&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.20&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.12&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.26&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.22&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.91&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.26&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.01&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.20&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.33&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.08&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.05&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.21&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.05&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.29&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.12&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.33&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.09&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.25&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.07&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.03&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.26&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.08&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.09&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.83&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.03&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.22&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.05&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.25&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.18&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.09&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value: -0.19&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value: -0.91&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.21&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.18&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.13&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.26&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.05&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.07&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.83&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.09&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.13&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  1.00&#34;]],&#34;colorscale&#34;:[[0,&#34;#903935&#34;],[0.303664921465969,&#34;#DCB5B0&#34;],[0.324607329842932,&#34;#E1BEB9&#34;],[0.345549738219895,&#34;#E5C7C3&#34;],[0.361256544502618,&#34;#E8CDCA&#34;],[0.371727748691099,&#34;#EAD2CE&#34;],[0.37696335078534,&#34;#ECD4D1&#34;],[0.392670157068063,&#34;#EFDBD8&#34;],[0.413612565445026,&#34;#F3E4E2&#34;],[0.429319371727749,&#34;#F6EAE9&#34;],[0.43455497382199,&#34;#F7EDEB&#34;],[0.43979057591623,&#34;#F8EFEE&#34;],[0.450261780104712,&#34;#FAF4F3&#34;],[0.460732984293194,&#34;#FCF8F8&#34;],[0.481675392670157,&#34;#FDFDFE&#34;],[0.539267015706806,&#34;#E8E5F3&#34;],[0.544502617801047,&#34;#E6E3F2&#34;],[0.56020942408377,&#34;#E1DDEF&#34;],[0.570680628272251,&#34;#DDD8ED&#34;],[0.586387434554974,&#34;#D7D2E9&#34;],[0.612565445026178,&#34;#CEC8E4&#34;],[0.910994764397906,&#34;#6058AA&#34;],[1,&#34;#3A3A98&#34;]],&#34;type&#34;:&#34;heatmap&#34;,&#34;showscale&#34;:false,&#34;autocolorscale&#34;:false,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8],&#34;y&#34;:[1,2,3,4,5,6,7,8],&#34;z&#34;:[[1,0.47,0.47,0.32,0.405,0.6,0.53,0.49],[0.47,1,0.325,0.325,0.325,0.32,0,0.285],[0.47,0.325,1,0.405,0.575,0.42,0.665,0.55],[0.32,0.325,0.405,1,0.455,0.385,0.665,0.465],[0.405,0.325,0.575,0.455,1,0.44,0.68,0.455],[0.6,0.32,0.42,0.385,0.44,1,0.69,0.635],[0.53,0,0.665,0.665,0.68,0.69,1,0.72],[0.49,0.285,0.55,0.465,0.455,0.635,0.72,1]],&#34;text&#34;:[[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.06&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.06&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.36&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.19&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.20&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.06&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value: -0.02&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.06&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.35&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.35&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.35&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.36&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -1.00&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.43&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.06&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.35&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.19&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.15&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.33&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.10&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.36&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.35&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.19&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.09&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.23&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.33&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.07&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.19&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.35&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.15&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.09&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.12&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.36&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value: -0.09&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.20&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.36&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.23&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value: -0.12&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.27&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.06&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value: -1.00&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.33&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.33&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.36&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.44&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.02&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.43&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.10&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.07&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value: -0.09&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.27&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.44&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  1.00&#34;]],&#34;colorscale&#34;:[[0,&#34;#832424&#34;],[0.285,&#34;#D09F99&#34;],[0.32,&#34;#D9AEA9&#34;],[0.325,&#34;#DAB0AB&#34;],[0.385,&#34;#E7CBC7&#34;],[0.405,&#34;#ECD4D1&#34;],[0.42,&#34;#EFDBD8&#34;],[0.44,&#34;#F3E4E2&#34;],[0.455,&#34;#F6EAE9&#34;],[0.465,&#34;#F8EFEE&#34;],[0.47,&#34;#F9F1F0&#34;],[0.49,&#34;#FDFAFA&#34;],[0.53,&#34;#F4F2F9&#34;],[0.55,&#34;#ECE9F5&#34;],[0.575,&#34;#E3DFF0&#34;],[0.6,&#34;#D9D4EB&#34;],[0.635,&#34;#CCC6E3&#34;],[0.665,&#34;#C1B9DD&#34;],[0.68,&#34;#BBB3DA&#34;],[0.69,&#34;#B7AFD8&#34;],[0.72,&#34;#ACA3D2&#34;],[1,&#34;#3A3A98&#34;]],&#34;type&#34;:&#34;heatmap&#34;,&#34;showscale&#34;:false,&#34;autocolorscale&#34;:false,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8],&#34;y&#34;:[1,2,3,4,5,6,7,8],&#34;z&#34;:[[1,0.583333333333333,0.596153846153846,0.608974358974359,0.852564102564103,0.711538461538462,0.391025641025641,0.83974358974359],[0.583333333333333,1,0.435897435897436,0.378205128205128,0.692307692307692,0.391025641025641,0,0.717948717948718],[0.596153846153846,0.435897435897436,1,0.185897435897436,0.628205128205128,0.378205128205128,0.435897435897436,0.602564102564103],[0.608974358974359,0.378205128205128,0.185897435897436,1,0.416666666666667,0.576923076923077,0.256410256410256,0.435897435897436],[0.852564102564103,0.692307692307692,0.628205128205128,0.416666666666667,1,0.474358974358974,0.41025641025641,0.974358974358974],[0.711538461538462,0.391025641025641,0.378205128205128,0.576923076923077,0.474358974358974,1,0.416666666666667,0.442307692307692],[0.391025641025641,0,0.435897435897436,0.256410256410256,0.41025641025641,0.416666666666667,1,0.397435897435897],[0.83974358974359,0.717948717948718,0.602564102564103,0.435897435897436,0.974358974358974,0.442307692307692,0.397435897435897,1]],&#34;text&#34;:[[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.35&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.37&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.39&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.77&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.55&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.05&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 100th_88th&lt;br /&gt;cor_value:  0.75&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.35&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.03&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.52&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.05&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value: -0.56&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 18th_23rd&lt;br /&gt;cor_value:  0.56&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.37&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value: -0.27&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.42&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.03&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 23rd_Hewitt&lt;br /&gt;cor_value:  0.38&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.39&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.03&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.27&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.09&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.34&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 4th_ramp&lt;br /&gt;cor_value:  0.12&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.77&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.52&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.42&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.09&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.18&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.08&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: 88th_grove&lt;br /&gt;cor_value:  0.96&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.55&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.05&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.03&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.34&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.18&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.09&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: grove_4th&lt;br /&gt;cor_value:  0.13&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.05&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value: -0.56&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value: -0.16&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.08&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.09&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  1.00&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: Hewitt_100th&lt;br /&gt;cor_value:  0.06&#34;],[&#34;seg: 100th_88th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.75&#34;,&#34;seg: 18th_23rd&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.56&#34;,&#34;seg: 23rd_Hewitt&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.38&#34;,&#34;seg: 4th_ramp&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.12&#34;,&#34;seg: 88th_grove&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.96&#34;,&#34;seg: grove_4th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.13&#34;,&#34;seg: Hewitt_100th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  0.06&#34;,&#34;seg: ramp_14th&lt;br /&gt;seg_1: ramp_14th&lt;br /&gt;cor_value:  1.00&#34;]],&#34;colorscale&#34;:[[0,&#34;#C0837C&#34;],[0.185897435897436,&#34;#E3C2BE&#34;],[0.256410256410256,&#34;#EFDBD8&#34;],[0.378205128205128,&#34;#F9F8FC&#34;],[0.391025641025641,&#34;#F6F4FA&#34;],[0.397435897435897,&#34;#F4F2F9&#34;],[0.41025641025641,&#34;#F0EEF7&#34;],[0.416666666666667,&#34;#EEECF6&#34;],[0.435897435897436,&#34;#E8E5F3&#34;],[0.442307692307692,&#34;#E6E3F2&#34;],[0.474358974358974,&#34;#DDD8ED&#34;],[0.576923076923077,&#34;#BFB7DC&#34;],[0.583333333333333,&#34;#BDB5DB&#34;],[0.596153846153846,&#34;#B9B1D9&#34;],[0.602564102564103,&#34;#B7AFD8&#34;],[0.608974358974359,&#34;#B6ADD7&#34;],[0.628205128205128,&#34;#B0A7D4&#34;],[0.692307692307692,&#34;#9D93CA&#34;],[0.711538461538462,&#34;#978DC7&#34;],[0.717948717948718,&#34;#958BC6&#34;],[0.83974358974359,&#34;#7167B2&#34;],[0.852564102564103,&#34;#6D63B0&#34;],[0.974358974358974,&#34;#44419C&#34;],[1,&#34;#3A3A98&#34;]],&#34;type&#34;:&#34;heatmap&#34;,&#34;showscale&#34;:false,&#34;autocolorscale&#34;:false,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y2&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1],&#34;y&#34;:[1],&#34;name&#34;:&#34;99_931a1bb17fcb0ace8c5a19dc50ffed83&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;opacity&#34;:0,&#34;hoverinfo&#34;:&#34;skip&#34;,&#34;showlegend&#34;:false,&#34;marker&#34;:{&#34;color&#34;:[0,1],&#34;colorscale&#34;:[[0,&#34;#832424&#34;],[0.00334448160535117,&#34;#842625&#34;],[0.00668896321070234,&#34;#852726&#34;],[0.0100334448160535,&#34;#862928&#34;],[0.0133779264214047,&#34;#872B29&#34;],[0.0167224080267558,&#34;#882C2A&#34;],[0.020066889632107,&#34;#892E2B&#34;],[0.0234113712374582,&#34;#8A2F2D&#34;],[0.0267558528428093,&#34;#8B312E&#34;],[0.0301003344481605,&#34;#8C322F&#34;],[0.0334448160535117,&#34;#8D3430&#34;],[0.0367892976588629,&#34;#8E3532&#34;],[0.040133779264214,&#34;#8F3733&#34;],[0.0434782608695652,&#34;#903834&#34;],[0.0468227424749164,&#34;#913A35&#34;],[0.0501672240802676,&#34;#923B37&#34;],[0.0535117056856187,&#34;#933D38&#34;],[0.0568561872909699,&#34;#943E39&#34;],[0.0602006688963211,&#34;#95403B&#34;],[0.0635451505016723,&#34;#96413C&#34;],[0.0668896321070234,&#34;#97423D&#34;],[0.0702341137123746,&#34;#98443E&#34;],[0.0735785953177258,&#34;#994540&#34;],[0.0769230769230769,&#34;#9A4741&#34;],[0.0802675585284281,&#34;#9B4842&#34;],[0.0836120401337793,&#34;#9C4A44&#34;],[0.0869565217391304,&#34;#9D4B45&#34;],[0.0903010033444816,&#34;#9D4C46&#34;],[0.0936454849498328,&#34;#9E4E48&#34;],[0.0969899665551839,&#34;#9F4F49&#34;],[0.100334448160535,&#34;#A0514A&#34;],[0.103678929765886,&#34;#A1524C&#34;],[0.107023411371237,&#34;#A2544D&#34;],[0.110367892976589,&#34;#A3554E&#34;],[0.11371237458194,&#34;#A45650&#34;],[0.117056856187291,&#34;#A55851&#34;],[0.120401337792642,&#34;#A65952&#34;],[0.123745819397993,&#34;#A75B54&#34;],[0.127090301003345,&#34;#A85C55&#34;],[0.130434782608696,&#34;#A95D56&#34;],[0.133779264214047,&#34;#AA5F58&#34;],[0.137123745819398,&#34;#AA6059&#34;],[0.140468227424749,&#34;#AB625B&#34;],[0.1438127090301,&#34;#AC635C&#34;],[0.147157190635452,&#34;#AD645D&#34;],[0.150501672240803,&#34;#AE665F&#34;],[0.153846153846154,&#34;#AF6760&#34;],[0.157190635451505,&#34;#B06961&#34;],[0.160535117056856,&#34;#B16A63&#34;],[0.163879598662207,&#34;#B26B64&#34;],[0.167224080267559,&#34;#B36D66&#34;],[0.17056856187291,&#34;#B36E67&#34;],[0.173913043478261,&#34;#B47069&#34;],[0.177257525083612,&#34;#B5716A&#34;],[0.180602006688963,&#34;#B6736B&#34;],[0.183946488294314,&#34;#B7746D&#34;],[0.187290969899666,&#34;#B8756E&#34;],[0.190635451505017,&#34;#B97770&#34;],[0.193979933110368,&#34;#BA7871&#34;],[0.197324414715719,&#34;#BA7A72&#34;],[0.20066889632107,&#34;#BB7B74&#34;],[0.204013377926421,&#34;#BC7C75&#34;],[0.207357859531773,&#34;#BD7E77&#34;],[0.210702341137124,&#34;#BE7F78&#34;],[0.214046822742475,&#34;#BF817A&#34;],[0.217391304347826,&#34;#C0827B&#34;],[0.220735785953177,&#34;#C0847D&#34;],[0.224080267558528,&#34;#C1857E&#34;],[0.22742474916388,&#34;#C28680&#34;],[0.230769230769231,&#34;#C38881&#34;],[0.234113712374582,&#34;#C48982&#34;],[0.237458193979933,&#34;#C58B84&#34;],[0.240802675585284,&#34;#C58C85&#34;],[0.244147157190635,&#34;#C68E87&#34;],[0.247491638795987,&#34;#C78F88&#34;],[0.250836120401338,&#34;#C8908A&#34;],[0.254180602006689,&#34;#C9928B&#34;],[0.25752508361204,&#34;#CA938D&#34;],[0.260869565217391,&#34;#CA958E&#34;],[0.264214046822742,&#34;#CB9690&#34;],[0.267558528428094,&#34;#CC9891&#34;],[0.270903010033445,&#34;#CD9993&#34;],[0.274247491638796,&#34;#CE9A94&#34;],[0.277591973244147,&#34;#CE9C96&#34;],[0.280936454849498,&#34;#CF9D97&#34;],[0.284280936454849,&#34;#D09F99&#34;],[0.287625418060201,&#34;#D1A09A&#34;],[0.290969899665552,&#34;#D2A29C&#34;],[0.294314381270903,&#34;#D2A39D&#34;],[0.297658862876254,&#34;#D3A59F&#34;],[0.301003344481605,&#34;#D4A6A0&#34;],[0.304347826086957,&#34;#D5A7A2&#34;],[0.307692307692308,&#34;#D6A9A3&#34;],[0.311036789297659,&#34;#D6AAA5&#34;],[0.31438127090301,&#34;#D7ACA6&#34;],[0.317725752508361,&#34;#D8ADA8&#34;],[0.321070234113712,&#34;#D9AFA9&#34;],[0.324414715719064,&#34;#DAB0AB&#34;],[0.327759197324415,&#34;#DAB2AD&#34;],[0.331103678929766,&#34;#DBB3AE&#34;],[0.334448160535117,&#34;#DCB5B0&#34;],[0.337792642140468,&#34;#DDB6B1&#34;],[0.341137123745819,&#34;#DDB8B3&#34;],[0.344481605351171,&#34;#DEB9B4&#34;],[0.347826086956522,&#34;#DFBBB6&#34;],[0.351170568561873,&#34;#E0BCB7&#34;],[0.354515050167224,&#34;#E0BDB9&#34;],[0.357859531772575,&#34;#E1BFBB&#34;],[0.361204013377926,&#34;#E2C0BC&#34;],[0.364548494983278,&#34;#E3C2BE&#34;],[0.367892976588629,&#34;#E3C3BF&#34;],[0.37123745819398,&#34;#E4C5C1&#34;],[0.374581939799331,&#34;#E5C6C2&#34;],[0.377926421404682,&#34;#E6C8C4&#34;],[0.381270903010033,&#34;#E6C9C6&#34;],[0.384615384615385,&#34;#E7CBC7&#34;],[0.387959866220736,&#34;#E8CCC9&#34;],[0.391304347826087,&#34;#E9CECA&#34;],[0.394648829431438,&#34;#E9CFCC&#34;],[0.397993311036789,&#34;#EAD1CD&#34;],[0.40133779264214,&#34;#EBD2CF&#34;],[0.404682274247492,&#34;#EBD4D1&#34;],[0.408026755852843,&#34;#ECD5D2&#34;],[0.411371237458194,&#34;#EDD7D4&#34;],[0.414715719063545,&#34;#EED8D5&#34;],[0.418060200668896,&#34;#EEDAD7&#34;],[0.421404682274247,&#34;#EFDBD9&#34;],[0.424749163879599,&#34;#F0DDDA&#34;],[0.42809364548495,&#34;#F0DEDC&#34;],[0.431438127090301,&#34;#F1E0DD&#34;],[0.434782608695652,&#34;#F2E1DF&#34;],[0.438127090301003,&#34;#F3E3E1&#34;],[0.441471571906354,&#34;#F3E4E2&#34;],[0.444816053511706,&#34;#F4E6E4&#34;],[0.448160535117057,&#34;#F5E7E6&#34;],[0.451505016722408,&#34;#F5E9E7&#34;],[0.454849498327759,&#34;#F6EAE9&#34;],[0.45819397993311,&#34;#F7ECEA&#34;],[0.461538461538462,&#34;#F7EDEC&#34;],[0.464882943143813,&#34;#F8EFEE&#34;],[0.468227424749164,&#34;#F9F0EF&#34;],[0.471571906354515,&#34;#F9F2F1&#34;],[0.474916387959866,&#34;#FAF4F3&#34;],[0.478260869565217,&#34;#FBF5F4&#34;],[0.481605351170569,&#34;#FBF7F6&#34;],[0.48494983277592,&#34;#FCF8F8&#34;],[0.488294314381271,&#34;#FDFAF9&#34;],[0.491638795986622,&#34;#FDFBFB&#34;],[0.494983277591973,&#34;#FEFDFD&#34;],[0.498327759197324,&#34;#FFFEFE&#34;],[0.501672240802676,&#34;#FEFEFF&#34;],[0.505016722408027,&#34;#FDFDFE&#34;],[0.508361204013378,&#34;#FCFBFD&#34;],[0.511705685618729,&#34;#FBFAFD&#34;],[0.51505016722408,&#34;#F9F8FC&#34;],[0.518394648829431,&#34;#F8F7FB&#34;],[0.521739130434783,&#34;#F7F6FB&#34;],[0.525083612040134,&#34;#F6F4FA&#34;],[0.528428093645485,&#34;#F4F3F9&#34;],[0.531772575250836,&#34;#F3F1F8&#34;],[0.535117056856187,&#34;#F2F0F8&#34;],[0.538461538461538,&#34;#F0EEF7&#34;],[0.54180602006689,&#34;#EFEDF6&#34;],[0.545150501672241,&#34;#EEEBF6&#34;],[0.548494983277592,&#34;#EDEAF5&#34;],[0.551839464882943,&#34;#EBE9F4&#34;],[0.555183946488294,&#34;#EAE7F4&#34;],[0.558528428093645,&#34;#E9E6F3&#34;],[0.561872909698997,&#34;#E8E4F2&#34;],[0.565217391304348,&#34;#E6E3F2&#34;],[0.568561872909699,&#34;#E5E1F1&#34;],[0.57190635451505,&#34;#E4E0F0&#34;],[0.575250836120401,&#34;#E3DFF0&#34;],[0.578595317725752,&#34;#E1DDEF&#34;],[0.581939799331104,&#34;#E0DCEE&#34;],[0.585284280936455,&#34;#DFDAEE&#34;],[0.588628762541806,&#34;#DED9ED&#34;],[0.591973244147157,&#34;#DCD8EC&#34;],[0.595317725752508,&#34;#DBD6EB&#34;],[0.598662207357859,&#34;#DAD5EB&#34;],[0.602006688963211,&#34;#D9D3EA&#34;],[0.605351170568562,&#34;#D7D2E9&#34;],[0.608695652173913,&#34;#D6D1E9&#34;],[0.612040133779264,&#34;#D5CFE8&#34;],[0.615384615384615,&#34;#D3CEE7&#34;],[0.618729096989967,&#34;#D2CCE7&#34;],[0.622073578595318,&#34;#D1CBE6&#34;],[0.625418060200669,&#34;#D0CAE5&#34;],[0.62876254180602,&#34;#CEC8E5&#34;],[0.632107023411371,&#34;#CDC7E4&#34;],[0.635451505016722,&#34;#CCC5E3&#34;],[0.638795986622074,&#34;#CBC4E3&#34;],[0.642140468227425,&#34;#C9C3E2&#34;],[0.645484949832776,&#34;#C8C1E1&#34;],[0.648829431438127,&#34;#C7C0E1&#34;],[0.652173913043478,&#34;#C6BEE0&#34;],[0.655518394648829,&#34;#C4BDDF&#34;],[0.658862876254181,&#34;#C3BCDE&#34;],[0.662207357859532,&#34;#C2BADE&#34;],[0.665551839464883,&#34;#C1B9DD&#34;],[0.668896321070234,&#34;#BFB8DC&#34;],[0.672240802675585,&#34;#BEB6DC&#34;],[0.675585284280936,&#34;#BDB5DB&#34;],[0.678929765886288,&#34;#BCB3DA&#34;],[0.682274247491639,&#34;#BAB2DA&#34;],[0.68561872909699,&#34;#B9B1D9&#34;],[0.688963210702341,&#34;#B8AFD8&#34;],[0.692307692307692,&#34;#B7AED8&#34;],[0.695652173913043,&#34;#B5ADD7&#34;],[0.698996655518395,&#34;#B4ABD6&#34;],[0.702341137123746,&#34;#B3AAD6&#34;],[0.705685618729097,&#34;#B2A9D5&#34;],[0.709030100334448,&#34;#B0A7D4&#34;],[0.712374581939799,&#34;#AFA6D3&#34;],[0.71571906354515,&#34;#AEA5D3&#34;],[0.719063545150502,&#34;#ACA3D2&#34;],[0.722408026755853,&#34;#ABA2D1&#34;],[0.725752508361204,&#34;#AAA0D1&#34;],[0.729096989966555,&#34;#A99FD0&#34;],[0.732441471571906,&#34;#A79ECF&#34;],[0.735785953177257,&#34;#A69CCF&#34;],[0.739130434782609,&#34;#A59BCE&#34;],[0.74247491638796,&#34;#A49ACD&#34;],[0.745819397993311,&#34;#A298CD&#34;],[0.749163879598662,&#34;#A197CC&#34;],[0.752508361204013,&#34;#A096CB&#34;],[0.755852842809364,&#34;#9F95CA&#34;],[0.759197324414716,&#34;#9D93CA&#34;],[0.762541806020067,&#34;#9C92C9&#34;],[0.765886287625418,&#34;#9B91C8&#34;],[0.769230769230769,&#34;#9A8FC8&#34;],[0.77257525083612,&#34;#988EC7&#34;],[0.775919732441472,&#34;#978DC6&#34;],[0.779264214046823,&#34;#968BC6&#34;],[0.782608695652174,&#34;#948AC5&#34;],[0.785953177257525,&#34;#9389C4&#34;],[0.789297658862876,&#34;#9287C4&#34;],[0.792642140468227,&#34;#9186C3&#34;],[0.795986622073579,&#34;#8F85C2&#34;],[0.79933110367893,&#34;#8E83C2&#34;],[0.802675585284281,&#34;#8D82C1&#34;],[0.806020066889632,&#34;#8B81C0&#34;],[0.809364548494983,&#34;#8A80BF&#34;],[0.812709030100334,&#34;#897EBF&#34;],[0.816053511705686,&#34;#887DBE&#34;],[0.819397993311037,&#34;#867CBD&#34;],[0.822742474916388,&#34;#857ABD&#34;],[0.826086956521739,&#34;#8479BC&#34;],[0.82943143812709,&#34;#8278BB&#34;],[0.832775919732441,&#34;#8177BB&#34;],[0.836120401337793,&#34;#8075BA&#34;],[0.839464882943144,&#34;#7F74B9&#34;],[0.842809364548495,&#34;#7D73B9&#34;],[0.846153846153846,&#34;#7C72B8&#34;],[0.849498327759197,&#34;#7B70B7&#34;],[0.852842809364548,&#34;#796FB6&#34;],[0.8561872909699,&#34;#786EB6&#34;],[0.859531772575251,&#34;#776DB5&#34;],[0.862876254180602,&#34;#756BB4&#34;],[0.866220735785953,&#34;#746AB4&#34;],[0.869565217391304,&#34;#7369B3&#34;],[0.872909698996655,&#34;#7168B2&#34;],[0.876254180602007,&#34;#7066B2&#34;],[0.879598662207358,&#34;#6F65B1&#34;],[0.882943143812709,&#34;#6D64B0&#34;],[0.88628762541806,&#34;#6C63B0&#34;],[0.889632107023411,&#34;#6B61AF&#34;],[0.892976588628763,&#34;#6960AE&#34;],[0.896321070234114,&#34;#685FAD&#34;],[0.899665551839465,&#34;#675EAD&#34;],[0.903010033444816,&#34;#655CAC&#34;],[0.906354515050167,&#34;#645BAB&#34;],[0.909698996655518,&#34;#635AAB&#34;],[0.91304347826087,&#34;#6159AA&#34;],[0.916387959866221,&#34;#6058A9&#34;],[0.919732441471572,&#34;#5E56A9&#34;],[0.923076923076923,&#34;#5D55A8&#34;],[0.926421404682274,&#34;#5C54A7&#34;],[0.929765886287625,&#34;#5A53A7&#34;],[0.933110367892977,&#34;#5951A6&#34;],[0.936454849498328,&#34;#5750A5&#34;],[0.939799331103679,&#34;#564FA4&#34;],[0.94314381270903,&#34;#554EA4&#34;],[0.946488294314381,&#34;#534DA3&#34;],[0.949832775919732,&#34;#524BA2&#34;],[0.953177257525084,&#34;#504AA2&#34;],[0.956521739130435,&#34;#4F49A1&#34;],[0.959866220735786,&#34;#4D48A0&#34;],[0.963210702341137,&#34;#4C47A0&#34;],[0.966555183946488,&#34;#4A469F&#34;],[0.969899665551839,&#34;#49449E&#34;],[0.973244147157191,&#34;#47439E&#34;],[0.976588628762542,&#34;#45429D&#34;],[0.979933110367893,&#34;#44419C&#34;],[0.983277591973244,&#34;#42409B&#34;],[0.986622073578595,&#34;#413F9B&#34;],[0.989966555183946,&#34;#3F3D9A&#34;],[0.993311036789298,&#34;#3D3C99&#34;],[0.996655518394649,&#34;#3C3B99&#34;],[1,&#34;#3A3A98&#34;]],&#34;colorbar&#34;:{&#34;bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;bordercolor&#34;:&#34;transparent&#34;,&#34;borderwidth&#34;:1.88976377952756,&#34;thickness&#34;:23.04,&#34;title&#34;:&#34;Cor Value&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-1.0&#34;,&#34;-0.5&#34;,&#34;0.0&#34;,&#34;0.5&#34;,&#34;1.0&#34;],&#34;tickvals&#34;:[0,0.25,0.5,0.75,1],&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;ticklen&#34;:2,&#34;len&#34;:0.5}},&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:37.4307458143075,&#34;r&#34;:18.9954337899543,&#34;b&#34;:50.7469412910239,&#34;l&#34;:81.0958904109589},&#34;plot_bgcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;paper_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;xaxis&#34;:{&#34;domain&#34;:[0,0.497716894977169],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[0.4,8.6],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;tickvals&#34;:[1,2,3,4,5,6,7,8],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-45,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y2&#34;,&#34;title&#34;:&#34;&#34;,&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0.503044140030441,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[0.4,8.6],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;tickvals&#34;:[1,2,3,4,5,6,7,8],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;&#34;,&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.497716894977169,&#34;y0&#34;:0.503044140030441,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;rgba(217,217,217,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;transparent&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.497716894977169,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.502283105022831,&#34;x1&#34;:1,&#34;y0&#34;:0.503044140030441,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;rgba(217,217,217,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;transparent&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.502283105022831,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;rgba(217,217,217,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;transparent&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;y0&#34;:0.503044140030441,&#34;y1&#34;:1,&#34;x0&#34;:0,&#34;x1&#34;:23.37899543379,&#34;xanchor&#34;:1,&#34;xsizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.497716894977169,&#34;y0&#34;:0,&#34;y1&#34;:0.496955859969559},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.502283105022831,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:0.496955859969559},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;rgba(217,217,217,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;transparent&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;y0&#34;:0,&#34;y1&#34;:0.496955859969559,&#34;x0&#34;:0,&#34;x1&#34;:23.37899543379,&#34;xanchor&#34;:1,&#34;xsizemode&#34;:&#34;pixel&#34;}],&#34;annotations&#34;:[{&#34;text&#34;:&#34;AMPeak&#34;,&#34;x&#34;:0.248858447488584,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;},{&#34;text&#34;:&#34;PMPeak&#34;,&#34;x&#34;:0.751141552511416,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;},{&#34;text&#34;:&#34;north_bound&#34;,&#34;x&#34;:1,&#34;y&#34;:0.751522070015221,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:90,&#34;xanchor&#34;:&#34;left&#34;,&#34;yanchor&#34;:&#34;middle&#34;},{&#34;text&#34;:&#34;south_bound&#34;,&#34;x&#34;:1,&#34;y&#34;:0.248477929984779,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:90,&#34;xanchor&#34;:&#34;left&#34;,&#34;yanchor&#34;:&#34;middle&#34;}],&#34;xaxis2&#34;:{&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[0.4,8.6],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;tickvals&#34;:[1,2,3,4,5,6,7,8],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-45,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;domain&#34;:[0.502283105022831,1],&#34;gridcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y2&#34;,&#34;title&#34;:&#34;&#34;,&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis2&#34;:{&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[0.4,8.6],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;tickvals&#34;:[1,2,3,4,5,6,7,8],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;100th_88th&#34;,&#34;18th_23rd&#34;,&#34;23rd_Hewitt&#34;,&#34;4th_ramp&#34;,&#34;88th_grove&#34;,&#34;grove_4th&#34;,&#34;Hewitt_100th&#34;,&#34;ramp_14th&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;domain&#34;:[0,0.496955859969559],&#34;gridcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;&#34;,&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;bordercolor&#34;:&#34;transparent&#34;,&#34;borderwidth&#34;:1.88976377952756,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;title&#34;:{&#34;text&#34;:&#34;&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[&#34;hoverclosest&#34;,&#34;hovercompare&#34;],&#34;showSendToCloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;43b47f06277b&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;fill&#34;:{},&#34;type&#34;:&#34;heatmap&#34;}},&#34;cur_data&#34;:&#34;43b47f06277b&#34;,&#34;visdat&#34;:{&#34;43b47f06277b&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;in-summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;In summary&lt;/h2&gt;
&lt;p&gt;So in simple terms, with a few lines of code and way fewer data objects we were able to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Make subsets of our data as defined by our grouping variables&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Make a compact, single nested data fram to hold our subsets and apply functions to it&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Unnest that nested list-column object to make a dataframe&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When working with data in R, consider using purrr and nested data frames with list columns over traditional methods. Here’s why:”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Simplified Code&lt;/code&gt;: Cleaner and more concise code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Structured Data&lt;/code&gt;: Organized and structured storage of related data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Efficiency&lt;/code&gt;: Efficient function application with purrr.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dynamic Input Handling&lt;/code&gt;: Handling dynamic inputs is straightforward.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Better Integration&lt;/code&gt;: Seamless integration with Tidyverse tools.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Improved Readability&lt;/code&gt;: Enhances code readability.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Easier Debugging&lt;/code&gt;: Simplified debugging due to structured data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scalability&lt;/code&gt;: Scales well for larger datasets and multiple factors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Maintainability&lt;/code&gt;: Easier management of a single nested data frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Community and Documentation:&lt;/code&gt; Strong support and extensive documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fucntion-izable Code&lt;/code&gt;: More concise, robust code can be &lt;em&gt;functionalized&lt;/em&gt; and reused&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-examples&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Additional Examples&lt;/h1&gt;
&lt;p&gt;This section is intended to get you interested in using purrr but without going into great detail…&lt;/p&gt;
&lt;div id=&#34;custom-metic-summarization-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Custom Metic Summarization Function&lt;/h2&gt;
&lt;p&gt;Apply &lt;code&gt;DescTools::Quantile()&lt;/code&gt; function many times (given user specified quantiles) to segment travel time metric and create many attributes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantiles &amp;lt;- seq(0, 1, .25)

data_qunatiles &amp;lt;- data %&amp;gt;%
  group_by(segement_name, flag_peak, direction_id) %&amp;gt;%
  summarize(across(time_diff,
    purrr::map(
      quantiles,
      ~ purrr::partial(DescTools::Quantile,
        probs = .x
      )
    ),
    .names = &amp;quot;{.col}_qt_{quantiles}&amp;quot;
  )) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(data_qunatiles)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 32
## Columns: 8
## $ segement_name     &amp;lt;chr&amp;gt; &amp;quot;100th_88th&amp;quot;, &amp;quot;100th_88th&amp;quot;, &amp;quot;100th_88th&amp;quot;, &amp;quot;100th_88t~
## $ flag_peak         &amp;lt;chr&amp;gt; &amp;quot;AMPeak&amp;quot;, &amp;quot;AMPeak&amp;quot;, &amp;quot;PMPeak&amp;quot;, &amp;quot;PMPeak&amp;quot;, &amp;quot;AMPeak&amp;quot;, &amp;quot;A~
## $ direction_id      &amp;lt;chr&amp;gt; &amp;quot;north_bound&amp;quot;, &amp;quot;south_bound&amp;quot;, &amp;quot;north_bound&amp;quot;, &amp;quot;south_~
## $ time_diff_qt_0    &amp;lt;dbl&amp;gt; 90.0000, 60.0000, 90.0000, 120.0000, 60.0000, 60.000~
## $ time_diff_qt_0.25 &amp;lt;dbl&amp;gt; 131.2500, 120.0000, 121.0000, 180.0000, 60.0000, 60.~
## $ time_diff_qt_0.5  &amp;lt;dbl&amp;gt; 150.0, 121.0, 180.0, 211.5, 61.0, 60.0, 90.0, 60.0, ~
## $ time_diff_qt_0.75 &amp;lt;dbl&amp;gt; 151.00, 151.00, 210.00, 278.25, 90.25, 90.00, 91.00,~
## $ time_diff_qt_1    &amp;lt;dbl&amp;gt; 241.0000, 211.0000, 331.0000, 1320.4986, 2700.0000, ~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For bonus points, function-alize it!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_stats &amp;lt;- function(data, grp_c = c(&amp;quot;segement_name&amp;quot;, &amp;quot;flag_peak&amp;quot;, &amp;quot;direction_id&amp;quot;),
                       quantiles = seq(0, 1, 0.05)) {
  data %&amp;gt;%
    group_by(across({{ grp_c }})) %&amp;gt;%
    summarize(across(time_diff, purrr::map(
      quantiles,
      ~ purrr::partial(DescTools::Quantile, probs = .x)
    ),
    .names = &amp;quot;{.col}_qt_{quantiles}&amp;quot;
    )) %&amp;gt;%
    ungroup()
}

make_stats(data, grp_c = &amp;quot;direction_id&amp;quot;, quantiles = c(.5, .95)) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-all-directory-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load All Directory Files&lt;/h2&gt;
&lt;p&gt;Loading multiple files from a directory can be a real hassle, but with map, you can simply point to a directory.&lt;/p&gt;
&lt;p&gt;R will handle the task of listing all the files in that directory - mapping through his list will load each one by one and you’ll end up with a single list object, where each element contains the contents of a file. It’s that easy&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_xlsx_allFiles &amp;lt;- function(data_location = &amp;quot;./data/&amp;quot;, specifically = NULL,
                               clean = F, clean_string = NULL, sheet = sheet, latest = F) {
  file_list &amp;lt;- list.files(data_location) %&amp;gt;%
    .[str_detect(., &amp;quot;xlsx&amp;quot;)] %&amp;gt;%
    paste0(data_location, .) %&amp;gt;%
    {
      if (!is.null(specifically)) (.) %&amp;gt;% .[str_detect(., specifically)] else .
    } %&amp;gt;%
    {
      if (latest) .[parse_number(.) == max(parse_number(.))] else .
    }

  if (clean) {
    data_list &amp;lt;-
      file_list %&amp;gt;%
      map(~ readxl::read_xlsx(.x, sheet = sheet) %&amp;gt;%
        na_if(&amp;quot;NULL&amp;quot;) %&amp;gt;%
        janitor::remove_empty(&amp;quot;cols&amp;quot;) %&amp;gt;%
        janitor::clean_names())
  } else {
    data_list &amp;lt;-
      file_list %&amp;gt;%
      map(~ readxl::read_xlsx(.x, sheet = sheet))
  }

  if (!is.null(clean_string)) {
    names(data_list) &amp;lt;- file_list %&amp;gt;%
      map(~ str_remove(.x, data_location) %&amp;gt;%
        str_remove(&amp;quot;.csv&amp;quot;) %&amp;gt;%
        gsub(str_glue(&amp;quot;{clean_string}.*&amp;quot;), &amp;quot;\\1&amp;quot;, .))
  } else {
    names(data_list) &amp;lt;- paste0(file_list, sheet)
  }

  data_list
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;scrape-mulitple-urls&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scrape Mulitple URLs&lt;/h2&gt;
&lt;p&gt;Take two lists of items, supply them to pmap (multiple-map) and scrape data tables on site.&lt;/p&gt;
&lt;p&gt;Notice that I can make intermediate data objects during the p-mapping operation, that won’t be saved to disk at the end.&lt;/p&gt;
&lt;p&gt;You will be left with a list containing four dataframes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(tidyverse)

# URL to scrape
url_list &amp;lt;- list(
  running_backs = &amp;quot;https://www.fantasypros.com/nfl/advanced-stats-rb.php?range=full&amp;quot;,
  running_backs_rz = &amp;quot;https://www.fantasypros.com/nfl/red-zone-stats/rb.php?range=full?range=full&amp;quot;,
  wide_rec = &amp;quot;https://www.fantasypros.com/nfl/advanced-stats-wr.php?range=full&amp;quot;,
  wide_rec_rz = &amp;quot;https://www.fantasypros.com/nfl/red-zone-stats/wr.php?range=full?range=full&amp;quot;
)

processed &amp;lt;- list(
  url_list,
  names(url_list)
) %&amp;gt;%
  pmap(function(x, y) {
    webpage &amp;lt;- read_html(x) %&amp;gt;%
      html_node(&amp;quot;#data&amp;quot;) %&amp;gt;% # Replace with the appropriate CSS selector
      html_table() %&amp;gt;%
      data.frame()

    colnames(webpage) &amp;lt;- webpage[2, ]
    webpage &amp;lt;- webpage[-c(1, 2), ]

    element_text &amp;lt;- webpage %&amp;gt;%
      janitor::clean_names() %&amp;gt;%
      mutate(across(c(contains(&amp;quot;pct&amp;quot;), contains(&amp;quot;_percent&amp;quot;)), ~ as.numeric(gsub(&amp;quot;%&amp;quot;, &amp;quot;&amp;quot;, .)))) %&amp;gt;%
      mutate_at(
        .vars = setdiff(names(.), &amp;quot;player&amp;quot;),
        .funs = as.numeric
      ) %&amp;gt;%
      separate(col = &amp;quot;player&amp;quot;, into = c(&amp;quot;player&amp;quot;, &amp;quot;team&amp;quot;), sep = &amp;quot; \\(&amp;quot;) %&amp;gt;%
      mutate(
        team = str_remove_all(team, &amp;quot;[[:punct:]]&amp;quot;),
        label = str_glue(&amp;quot;{player}&amp;quot;)
      ) %&amp;gt;%
      mutate(data = y)

    print(element_text)

    Sys.sleep(2)

    return(element_text)
    # return(list(element_text, webpage)) #if you want to return multiple subobjects
  })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;performingsaving-workflows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Performing/Saving Workflows&lt;/h2&gt;
&lt;p&gt;Complex workflows can be streamlined into a single map/nest/purrr process.&lt;/p&gt;
&lt;p&gt;The following script carries out four distinct operations on spatial data, each generating a unique nested column.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TS Subset: This step temporally pre-filters each precinct within a defined time window.&lt;/li&gt;
&lt;li&gt;TF_SF: Performs spatial processing of the data and additional data manipulation.&lt;/li&gt;
&lt;li&gt;LM Mod Summary: Generates individual models for each record.&lt;/li&gt;
&lt;li&gt;LM Mod Coefficient and Mod NA Check: Extracts model performance coefficients from each model and ensures the successful execution of each model.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_summons &amp;lt;- function(corridor_obj, summons,
                          lookback = 12, extra_rad = 0) {
  # corridor_obj = enf_corridor_list_objct
  # summons = summons_data
  # lookback = 12
  # extra_rad = 0

  corridor_obj %&amp;gt;%
    .[c(1), ] %&amp;gt;%
    mutate(
      summons_ts_subset = pmap(
        list(dt_start, dt_stop, data_yr),
        function(x, y, z) {
          tryCatch(
            {
              summons %&amp;gt;%
                .[VIOLATION_DATE &amp;gt; (x - months(lookback)) &amp;amp;
                  VIOLATION_DATE &amp;lt; (y + months(lookback)), ]
            },
            error = function(err) {
              print(&amp;quot;Error in summons prefilter..&amp;quot;)
              print(err$message)
              return(NA)
            }
          )
        }
      )
    ) %&amp;gt;%
    mutate(
      summons_ts_sf = pmap(
        list(summons_ts_subset, links_buff, dt_start, dt_stop),
        function(x, y, z, m) {
          tryCatch(
            {
              x %&amp;gt;%
                st_as_sf(
                  coords = c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;),
                  crs = 4326
                ) %&amp;gt;%
                st_filter(y %&amp;gt;%
                  gauntlet::quick_buffer(radius = extra_rad)) %&amp;gt;%
                st_drop_geometry() %&amp;gt;%
                mutate(period = case_when(
                  (VIOLATION_DATE) &amp;lt; as_date(as_date(z) - months(1)) ~ &amp;quot;BeforeAction&amp;quot;,
                  (VIOLATION_DATE) &amp;gt; as_date(as_date(m) + months(1)) ~ &amp;quot;AfterAction&amp;quot;,
                  T ~ &amp;quot;Middle&amp;quot;
                ) %&amp;gt;%
                  fct_relevel(&amp;quot;BeforeAction&amp;quot;, &amp;quot;AfterAction&amp;quot;, &amp;quot;Middle&amp;quot;)) %&amp;gt;%
                group_by(VIOLATION_DATE, period) %&amp;gt;%
                summarise(count = sum(count)) %&amp;gt;%
                ungroup()
            },
            error = function(err) {
              print(&amp;quot;Error occurred:&amp;quot;)
              print(err$message)
              return(NA)
            }
          )
        }
      )
    ) %&amp;gt;%
    mutate(
      lm_mod_smmry = map(
        summons_ts_sf,
        ~ {
          tryCatch(
            {
              lm(count ~ period, data = .x) %&amp;gt;%
                summary()
            },
            error = function(err) {
              print(paste(&amp;quot;Error occurred:&amp;quot;, err$message))
              return(NA)
            }
          )
        }
      )
    ) %&amp;gt;%
    mutate(
      lm_mod_coef = map(
        lm_mod_smmry,
        ~ {
          tryCatch(
            {
              .x %&amp;gt;%
                coef() %&amp;gt;%
                data.frame() %&amp;gt;%
                mutate(metric = rownames(.))
            },
            error = function(err) {
              print(paste(&amp;quot;Error occurred:&amp;quot;, err$message))
              return(NA)
            }
          )
        }
      ),
      mod_na_check = map(
        lm_mod_coef, ~ (.x %&amp;gt;% nrow())
      )
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the below image – it is the object created by this function. You can save it as an RDS object, so there’s no need to rerun your entire analysis. This nifty trick simplifies data storage and retrieval, making life easier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nested_models.PNG&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;making-maps-with-many-layers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making Maps with Many Layers&lt;/h2&gt;
&lt;p&gt;Creating maps with numerous unique layers can be a bit of a headache if you’re constructing each layer manually.&lt;/p&gt;
&lt;p&gt;The good news is, there’s an easier way – map over each variable layer to craft a unique map, and then blend all those layers into a single, grand map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_od_sf %&amp;gt;%
  mutate(layer_id = str_glue(&amp;quot;{vehicle_type} - {type}&amp;quot;)  %&amp;gt;%
  group_by(layer_id_1 = layer_id) %&amp;gt;%
  group_map(~{
    tmp_layer_name = unique(.x$layer_id)

    mapview(.x
            ,cex = &amp;quot;count&amp;quot;
            ,zcol = &amp;quot;count&amp;quot;
            ,layer.name = str_glue(&amp;quot;{tmp_layer_name} - Freight Count&amp;quot;)
            # ,col.region = pal(.x$count))
    )
  }) %&amp;gt;%
      reduce(`+`)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;map.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
