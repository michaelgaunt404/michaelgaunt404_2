<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5Min Tutorials on The Gauntlet: An R Blog</title>
    <link>https://mikegaunt404.netlify.app/tags/5min-tutorials/</link>
    <description>Recent content in 5Min Tutorials on The Gauntlet: An R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mikegaunt404.netlify.app/tags/5min-tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5 Minute Tutorials: Using Protocol Buffers in R</title>
      <link>https://mikegaunt404.netlify.app/2025/01/28/quickie-protobuf/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://mikegaunt404.netlify.app/2025/01/28/quickie-protobuf/</guid>
      <description>Quick OverviewHi hi!
This is a quick tutorial on using Protocol Buffers (protobufs) in R, particularly for working with GTFS-realtime data. If you’ve ever struggled to parse protobuf data, this guide will walk through the key steps to get you started.
What are Protocol Buffers?Protocol Buffers (protobufs) are a language-neutral, platform-neutral extensible mechanism for serializing structured data. They are commonly used in real-time data applications, such as GTFS-realtime, because they are lightweight and efficient.</description>
    </item>
    
    <item>
      <title>5 Minute Tutorials: Fast Data Loading</title>
      <link>https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mikegaunt404.netlify.app/2023/12/21/quickie-fast-data-loading/</guid>
      <description>Quick OverviewHi hi!
This is intended to be a very quick tutorial highlighting bite-sizeable and really helpful R tips.
What are we looking at todayI wanted to share some really fast, efficient, and extremely useful data storage methods that extend far beyond the capabilities of write.csv().
Specifically, using:
qs objectsrds objectsdata.table CSVsbase R CSVsLink to qs github page - the features table provides a really great way to compare the main methods we will be looking at.</description>
    </item>
    
    <item>
      <title>Kara ❤️ Elon</title>
      <link>https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mikegaunt404.netlify.app/2023/11/14/kara-heart-elon/</guid>
      <description>IntroKara loves to talk about Elon Musk.
A couple of friends asked me how often I thought Kara directly mentions/talks about Elon Musk
This is my attempt to quantify that.
MethodThe data used for this was copied directly from the Apple Podcast App website.
I only use show note descriptions so any reference to Elon in a podcast but not in the show notes will not be counted.</description>
    </item>
    
    <item>
      <title>5 Minute Tutorials: Tricks with Purrr::map() #1</title>
      <link>https://mikegaunt404.netlify.app/2023/10/13/quickie-purrr/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mikegaunt404.netlify.app/2023/10/13/quickie-purrr/</guid>
      <description>Quick OverviewHi hi!
This is intended to be a very quick tutorial highlighting bite-sizeable and really helpful R tips.
What are we looking at todayI wanted to share how to use purrr::map() to apply function that produces more that one output (columns) to a dataframe.
HowWe ware going to make basic script that lists all files in a directory and its sub-directories that have a specific extension.</description>
    </item>
    
  </channel>
</rss>
